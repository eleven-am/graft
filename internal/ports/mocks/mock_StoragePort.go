// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockStoragePort is an autogenerated mock type for the StoragePort type
type MockStoragePort struct {
	mock.Mock
}

type MockStoragePort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStoragePort) EXPECT() *MockStoragePort_Expecter {
	return &MockStoragePort_Expecter{mock: &_m.Mock}
}

// Batch provides a mock function with given fields: ctx, ops
func (_m *MockStoragePort) Batch(ctx context.Context, ops []ports.Operation) error {
	ret := _m.Called(ctx, ops)

	if len(ret) == 0 {
		panic("no return value specified for Batch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []ports.Operation) error); ok {
		r0 = rf(ctx, ops)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStoragePort_Batch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Batch'
type MockStoragePort_Batch_Call struct {
	*mock.Call
}

// Batch is a helper method to define mock.On call
//   - ctx context.Context
//   - ops []ports.Operation
func (_e *MockStoragePort_Expecter) Batch(ctx interface{}, ops interface{}) *MockStoragePort_Batch_Call {
	return &MockStoragePort_Batch_Call{Call: _e.mock.On("Batch", ctx, ops)}
}

func (_c *MockStoragePort_Batch_Call) Run(run func(ctx context.Context, ops []ports.Operation)) *MockStoragePort_Batch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ports.Operation))
	})
	return _c
}

func (_c *MockStoragePort_Batch_Call) Return(_a0 error) *MockStoragePort_Batch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStoragePort_Batch_Call) RunAndReturn(run func(context.Context, []ports.Operation) error) *MockStoragePort_Batch_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockStoragePort) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStoragePort_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStoragePort_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStoragePort_Expecter) Close() *MockStoragePort_Close_Call {
	return &MockStoragePort_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStoragePort_Close_Call) Run(run func()) *MockStoragePort_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStoragePort_Close_Call) Return(_a0 error) *MockStoragePort_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStoragePort_Close_Call) RunAndReturn(run func() error) *MockStoragePort_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockStoragePort) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStoragePort_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStoragePort_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStoragePort_Expecter) Delete(ctx interface{}, key interface{}) *MockStoragePort_Delete_Call {
	return &MockStoragePort_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockStoragePort_Delete_Call) Run(run func(ctx context.Context, key string)) *MockStoragePort_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStoragePort_Delete_Call) Return(_a0 error) *MockStoragePort_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStoragePort_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockStoragePort_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockStoragePort) Get(ctx context.Context, key string) ([]byte, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStoragePort_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStoragePort_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStoragePort_Expecter) Get(ctx interface{}, key interface{}) *MockStoragePort_Get_Call {
	return &MockStoragePort_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockStoragePort_Get_Call) Run(run func(ctx context.Context, key string)) *MockStoragePort_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStoragePort_Get_Call) Return(_a0 []byte, _a1 error) *MockStoragePort_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStoragePort_Get_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *MockStoragePort_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, prefix
func (_m *MockStoragePort) List(ctx context.Context, prefix string) ([]ports.KeyValue, error) {
	ret := _m.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []ports.KeyValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]ports.KeyValue, error)); ok {
		return rf(ctx, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []ports.KeyValue); ok {
		r0 = rf(ctx, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ports.KeyValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStoragePort_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockStoragePort_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *MockStoragePort_Expecter) List(ctx interface{}, prefix interface{}) *MockStoragePort_List_Call {
	return &MockStoragePort_List_Call{Call: _e.mock.On("List", ctx, prefix)}
}

func (_c *MockStoragePort_List_Call) Run(run func(ctx context.Context, prefix string)) *MockStoragePort_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStoragePort_List_Call) Return(_a0 []ports.KeyValue, _a1 error) *MockStoragePort_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStoragePort_List_Call) RunAndReturn(run func(context.Context, string) ([]ports.KeyValue, error)) *MockStoragePort_List_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, key, value
func (_m *MockStoragePort) Put(ctx context.Context, key string, value []byte) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStoragePort_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockStoragePort_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value []byte
func (_e *MockStoragePort_Expecter) Put(ctx interface{}, key interface{}, value interface{}) *MockStoragePort_Put_Call {
	return &MockStoragePort_Put_Call{Call: _e.mock.On("Put", ctx, key, value)}
}

func (_c *MockStoragePort_Put_Call) Run(run func(ctx context.Context, key string, value []byte)) *MockStoragePort_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockStoragePort_Put_Call) Return(_a0 error) *MockStoragePort_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStoragePort_Put_Call) RunAndReturn(run func(context.Context, string, []byte) error) *MockStoragePort_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStoragePort creates a new instance of MockStoragePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStoragePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStoragePort {
	mock := &MockStoragePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
