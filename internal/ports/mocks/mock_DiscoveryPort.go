// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockDiscoveryPort is an autogenerated mock type for the DiscoveryPort type
type MockDiscoveryPort struct {
	mock.Mock
}

type MockDiscoveryPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscoveryPort) EXPECT() *MockDiscoveryPort_Expecter {
	return &MockDiscoveryPort_Expecter{mock: &_m.Mock}
}

// Announce provides a mock function with given fields: nodeInfo
func (_m *MockDiscoveryPort) Announce(nodeInfo ports.Peer) error {
	ret := _m.Called(nodeInfo)

	if len(ret) == 0 {
		panic("no return value specified for Announce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ports.Peer) error); ok {
		r0 = rf(nodeInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscoveryPort_Announce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Announce'
type MockDiscoveryPort_Announce_Call struct {
	*mock.Call
}

// Announce is a helper method to define mock.On call
//   - nodeInfo ports.Peer
func (_e *MockDiscoveryPort_Expecter) Announce(nodeInfo interface{}) *MockDiscoveryPort_Announce_Call {
	return &MockDiscoveryPort_Announce_Call{Call: _e.mock.On("Announce", nodeInfo)}
}

func (_c *MockDiscoveryPort_Announce_Call) Run(run func(nodeInfo ports.Peer)) *MockDiscoveryPort_Announce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ports.Peer))
	})
	return _c
}

func (_c *MockDiscoveryPort_Announce_Call) Return(_a0 error) *MockDiscoveryPort_Announce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscoveryPort_Announce_Call) RunAndReturn(run func(ports.Peer) error) *MockDiscoveryPort_Announce_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeers provides a mock function with no fields
func (_m *MockDiscoveryPort) GetPeers() []ports.Peer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPeers")
	}

	var r0 []ports.Peer
	if rf, ok := ret.Get(0).(func() []ports.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ports.Peer)
		}
	}

	return r0
}

// MockDiscoveryPort_GetPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeers'
type MockDiscoveryPort_GetPeers_Call struct {
	*mock.Call
}

// GetPeers is a helper method to define mock.On call
func (_e *MockDiscoveryPort_Expecter) GetPeers() *MockDiscoveryPort_GetPeers_Call {
	return &MockDiscoveryPort_GetPeers_Call{Call: _e.mock.On("GetPeers")}
}

func (_c *MockDiscoveryPort_GetPeers_Call) Run(run func()) *MockDiscoveryPort_GetPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryPort_GetPeers_Call) Return(_a0 []ports.Peer) *MockDiscoveryPort_GetPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscoveryPort_GetPeers_Call) RunAndReturn(run func() []ports.Peer) *MockDiscoveryPort_GetPeers_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockDiscoveryPort) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscoveryPort_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockDiscoveryPort_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDiscoveryPort_Expecter) Start(ctx interface{}) *MockDiscoveryPort_Start_Call {
	return &MockDiscoveryPort_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockDiscoveryPort_Start_Call) Run(run func(ctx context.Context)) *MockDiscoveryPort_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDiscoveryPort_Start_Call) Return(_a0 error) *MockDiscoveryPort_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscoveryPort_Start_Call) RunAndReturn(run func(context.Context) error) *MockDiscoveryPort_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockDiscoveryPort) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscoveryPort_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockDiscoveryPort_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockDiscoveryPort_Expecter) Stop() *MockDiscoveryPort_Stop_Call {
	return &MockDiscoveryPort_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockDiscoveryPort_Stop_Call) Run(run func()) *MockDiscoveryPort_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryPort_Stop_Call) Return(_a0 error) *MockDiscoveryPort_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscoveryPort_Stop_Call) RunAndReturn(run func() error) *MockDiscoveryPort_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDiscoveryPort creates a new instance of MockDiscoveryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscoveryPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscoveryPort {
	mock := &MockDiscoveryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
