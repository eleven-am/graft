// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockResourceManagerPort is an autogenerated mock type for the ResourceManagerPort type
type MockResourceManagerPort struct {
	mock.Mock
}

type MockResourceManagerPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceManagerPort) EXPECT() *MockResourceManagerPort_Expecter {
	return &MockResourceManagerPort_Expecter{mock: &_m.Mock}
}

// AcquireNode provides a mock function with given fields: nodeType, priority
func (_m *MockResourceManagerPort) AcquireNode(nodeType string, priority ...int) error {
	_va := make([]interface{}, len(priority))
	for _i := range priority {
		_va[_i] = priority[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, nodeType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcquireNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...int) error); ok {
		r0 = rf(nodeType, priority...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResourceManagerPort_AcquireNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireNode'
type MockResourceManagerPort_AcquireNode_Call struct {
	*mock.Call
}

// AcquireNode is a helper method to define mock.On call
//   - nodeType string
//   - priority ...int
func (_e *MockResourceManagerPort_Expecter) AcquireNode(nodeType interface{}, priority ...interface{}) *MockResourceManagerPort_AcquireNode_Call {
	return &MockResourceManagerPort_AcquireNode_Call{Call: _e.mock.On("AcquireNode",
		append([]interface{}{nodeType}, priority...)...)}
}

func (_c *MockResourceManagerPort_AcquireNode_Call) Run(run func(nodeType string, priority ...int)) *MockResourceManagerPort_AcquireNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockResourceManagerPort_AcquireNode_Call) Return(_a0 error) *MockResourceManagerPort_AcquireNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceManagerPort_AcquireNode_Call) RunAndReturn(run func(string, ...int) error) *MockResourceManagerPort_AcquireNode_Call {
	_c.Call.Return(run)
	return _c
}

// CanExecuteNode provides a mock function with given fields: nodeType
func (_m *MockResourceManagerPort) CanExecuteNode(nodeType string) bool {
	ret := _m.Called(nodeType)

	if len(ret) == 0 {
		panic("no return value specified for CanExecuteNode")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(nodeType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockResourceManagerPort_CanExecuteNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanExecuteNode'
type MockResourceManagerPort_CanExecuteNode_Call struct {
	*mock.Call
}

// CanExecuteNode is a helper method to define mock.On call
//   - nodeType string
func (_e *MockResourceManagerPort_Expecter) CanExecuteNode(nodeType interface{}) *MockResourceManagerPort_CanExecuteNode_Call {
	return &MockResourceManagerPort_CanExecuteNode_Call{Call: _e.mock.On("CanExecuteNode", nodeType)}
}

func (_c *MockResourceManagerPort_CanExecuteNode_Call) Run(run func(nodeType string)) *MockResourceManagerPort_CanExecuteNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockResourceManagerPort_CanExecuteNode_Call) Return(_a0 bool) *MockResourceManagerPort_CanExecuteNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceManagerPort_CanExecuteNode_Call) RunAndReturn(run func(string) bool) *MockResourceManagerPort_CanExecuteNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionStats provides a mock function with no fields
func (_m *MockResourceManagerPort) GetExecutionStats() ports.ExecutionStats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionStats")
	}

	var r0 ports.ExecutionStats
	if rf, ok := ret.Get(0).(func() ports.ExecutionStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ports.ExecutionStats)
	}

	return r0
}

// MockResourceManagerPort_GetExecutionStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionStats'
type MockResourceManagerPort_GetExecutionStats_Call struct {
	*mock.Call
}

// GetExecutionStats is a helper method to define mock.On call
func (_e *MockResourceManagerPort_Expecter) GetExecutionStats() *MockResourceManagerPort_GetExecutionStats_Call {
	return &MockResourceManagerPort_GetExecutionStats_Call{Call: _e.mock.On("GetExecutionStats")}
}

func (_c *MockResourceManagerPort_GetExecutionStats_Call) Run(run func()) *MockResourceManagerPort_GetExecutionStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManagerPort_GetExecutionStats_Call) Return(_a0 ports.ExecutionStats) *MockResourceManagerPort_GetExecutionStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceManagerPort_GetExecutionStats_Call) RunAndReturn(run func() ports.ExecutionStats) *MockResourceManagerPort_GetExecutionStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealthMetrics provides a mock function with no fields
func (_m *MockResourceManagerPort) GetHealthMetrics() ports.HealthMetrics {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHealthMetrics")
	}

	var r0 ports.HealthMetrics
	if rf, ok := ret.Get(0).(func() ports.HealthMetrics); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ports.HealthMetrics)
	}

	return r0
}

// MockResourceManagerPort_GetHealthMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealthMetrics'
type MockResourceManagerPort_GetHealthMetrics_Call struct {
	*mock.Call
}

// GetHealthMetrics is a helper method to define mock.On call
func (_e *MockResourceManagerPort_Expecter) GetHealthMetrics() *MockResourceManagerPort_GetHealthMetrics_Call {
	return &MockResourceManagerPort_GetHealthMetrics_Call{Call: _e.mock.On("GetHealthMetrics")}
}

func (_c *MockResourceManagerPort_GetHealthMetrics_Call) Run(run func()) *MockResourceManagerPort_GetHealthMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManagerPort_GetHealthMetrics_Call) Return(_a0 ports.HealthMetrics) *MockResourceManagerPort_GetHealthMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceManagerPort_GetHealthMetrics_Call) RunAndReturn(run func() ports.HealthMetrics) *MockResourceManagerPort_GetHealthMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcePools provides a mock function with no fields
func (_m *MockResourceManagerPort) GetResourcePools() []ports.ResourcePool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePools")
	}

	var r0 []ports.ResourcePool
	if rf, ok := ret.Get(0).(func() []ports.ResourcePool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ports.ResourcePool)
		}
	}

	return r0
}

// MockResourceManagerPort_GetResourcePools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcePools'
type MockResourceManagerPort_GetResourcePools_Call struct {
	*mock.Call
}

// GetResourcePools is a helper method to define mock.On call
func (_e *MockResourceManagerPort_Expecter) GetResourcePools() *MockResourceManagerPort_GetResourcePools_Call {
	return &MockResourceManagerPort_GetResourcePools_Call{Call: _e.mock.On("GetResourcePools")}
}

func (_c *MockResourceManagerPort_GetResourcePools_Call) Run(run func()) *MockResourceManagerPort_GetResourcePools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManagerPort_GetResourcePools_Call) Return(_a0 []ports.ResourcePool) *MockResourceManagerPort_GetResourcePools_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceManagerPort_GetResourcePools_Call) RunAndReturn(run func() []ports.ResourcePool) *MockResourceManagerPort_GetResourcePools_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceStates provides a mock function with given fields: ctx, workflowID
func (_m *MockResourceManagerPort) GetResourceStates(ctx context.Context, workflowID string) ([]ports.ResourceState, error) {
	ret := _m.Called(ctx, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceStates")
	}

	var r0 []ports.ResourceState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]ports.ResourceState, error)); ok {
		return rf(ctx, workflowID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []ports.ResourceState); ok {
		r0 = rf(ctx, workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ports.ResourceState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceManagerPort_GetResourceStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceStates'
type MockResourceManagerPort_GetResourceStates_Call struct {
	*mock.Call
}

// GetResourceStates is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
func (_e *MockResourceManagerPort_Expecter) GetResourceStates(ctx interface{}, workflowID interface{}) *MockResourceManagerPort_GetResourceStates_Call {
	return &MockResourceManagerPort_GetResourceStates_Call{Call: _e.mock.On("GetResourceStates", ctx, workflowID)}
}

func (_c *MockResourceManagerPort_GetResourceStates_Call) Run(run func(ctx context.Context, workflowID string)) *MockResourceManagerPort_GetResourceStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceManagerPort_GetResourceStates_Call) Return(_a0 []ports.ResourceState, _a1 error) *MockResourceManagerPort_GetResourceStates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceManagerPort_GetResourceStates_Call) RunAndReturn(run func(context.Context, string) ([]ports.ResourceState, error)) *MockResourceManagerPort_GetResourceStates_Call {
	_c.Call.Return(run)
	return _c
}

// IsHealthy provides a mock function with no fields
func (_m *MockResourceManagerPort) IsHealthy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockResourceManagerPort_IsHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHealthy'
type MockResourceManagerPort_IsHealthy_Call struct {
	*mock.Call
}

// IsHealthy is a helper method to define mock.On call
func (_e *MockResourceManagerPort_Expecter) IsHealthy() *MockResourceManagerPort_IsHealthy_Call {
	return &MockResourceManagerPort_IsHealthy_Call{Call: _e.mock.On("IsHealthy")}
}

func (_c *MockResourceManagerPort_IsHealthy_Call) Run(run func()) *MockResourceManagerPort_IsHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManagerPort_IsHealthy_Call) Return(_a0 bool) *MockResourceManagerPort_IsHealthy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceManagerPort_IsHealthy_Call) RunAndReturn(run func() bool) *MockResourceManagerPort_IsHealthy_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseNode provides a mock function with given fields: nodeType
func (_m *MockResourceManagerPort) ReleaseNode(nodeType string) error {
	ret := _m.Called(nodeType)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResourceManagerPort_ReleaseNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseNode'
type MockResourceManagerPort_ReleaseNode_Call struct {
	*mock.Call
}

// ReleaseNode is a helper method to define mock.On call
//   - nodeType string
func (_e *MockResourceManagerPort_Expecter) ReleaseNode(nodeType interface{}) *MockResourceManagerPort_ReleaseNode_Call {
	return &MockResourceManagerPort_ReleaseNode_Call{Call: _e.mock.On("ReleaseNode", nodeType)}
}

func (_c *MockResourceManagerPort_ReleaseNode_Call) Run(run func(nodeType string)) *MockResourceManagerPort_ReleaseNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockResourceManagerPort_ReleaseNode_Call) Return(_a0 error) *MockResourceManagerPort_ReleaseNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceManagerPort_ReleaseNode_Call) RunAndReturn(run func(string) error) *MockResourceManagerPort_ReleaseNode_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfig provides a mock function with given fields: config
func (_m *MockResourceManagerPort) UpdateConfig(config ports.ResourceConfig) error {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ports.ResourceConfig) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResourceManagerPort_UpdateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfig'
type MockResourceManagerPort_UpdateConfig_Call struct {
	*mock.Call
}

// UpdateConfig is a helper method to define mock.On call
//   - config ports.ResourceConfig
func (_e *MockResourceManagerPort_Expecter) UpdateConfig(config interface{}) *MockResourceManagerPort_UpdateConfig_Call {
	return &MockResourceManagerPort_UpdateConfig_Call{Call: _e.mock.On("UpdateConfig", config)}
}

func (_c *MockResourceManagerPort_UpdateConfig_Call) Run(run func(config ports.ResourceConfig)) *MockResourceManagerPort_UpdateConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ports.ResourceConfig))
	})
	return _c
}

func (_c *MockResourceManagerPort_UpdateConfig_Call) Return(_a0 error) *MockResourceManagerPort_UpdateConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceManagerPort_UpdateConfig_Call) RunAndReturn(run func(ports.ResourceConfig) error) *MockResourceManagerPort_UpdateConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResourceManagerPort creates a new instance of MockResourceManagerPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceManagerPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceManagerPort {
	mock := &MockResourceManagerPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
