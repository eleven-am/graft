// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockDiscoveryManager is an autogenerated mock type for the DiscoveryManager type
type MockDiscoveryManager struct {
	mock.Mock
}

type MockDiscoveryManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscoveryManager) EXPECT() *MockDiscoveryManager_Expecter {
	return &MockDiscoveryManager_Expecter{mock: &_m.Mock}
}

// GetPeers provides a mock function with no fields
func (_m *MockDiscoveryManager) GetPeers() []ports.Peer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPeers")
	}

	var r0 []ports.Peer
	if rf, ok := ret.Get(0).(func() []ports.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ports.Peer)
		}
	}

	return r0
}

// MockDiscoveryManager_GetPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeers'
type MockDiscoveryManager_GetPeers_Call struct {
	*mock.Call
}

// GetPeers is a helper method to define mock.On call
func (_e *MockDiscoveryManager_Expecter) GetPeers() *MockDiscoveryManager_GetPeers_Call {
	return &MockDiscoveryManager_GetPeers_Call{Call: _e.mock.On("GetPeers")}
}

func (_c *MockDiscoveryManager_GetPeers_Call) Run(run func()) *MockDiscoveryManager_GetPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryManager_GetPeers_Call) Return(_a0 []ports.Peer) *MockDiscoveryManager_GetPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscoveryManager_GetPeers_Call) RunAndReturn(run func() []ports.Peer) *MockDiscoveryManager_GetPeers_Call {
	_c.Call.Return(run)
	return _c
}

// Kubernetes provides a mock function with given fields: args
func (_m *MockDiscoveryManager) Kubernetes(args ...string) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockDiscoveryManager_Kubernetes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kubernetes'
type MockDiscoveryManager_Kubernetes_Call struct {
	*mock.Call
}

// Kubernetes is a helper method to define mock.On call
//   - args ...string
func (_e *MockDiscoveryManager_Expecter) Kubernetes(args ...interface{}) *MockDiscoveryManager_Kubernetes_Call {
	return &MockDiscoveryManager_Kubernetes_Call{Call: _e.mock.On("Kubernetes",
		append([]interface{}{}, args...)...)}
}

func (_c *MockDiscoveryManager_Kubernetes_Call) Run(run func(args ...string)) *MockDiscoveryManager_Kubernetes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockDiscoveryManager_Kubernetes_Call) Return() *MockDiscoveryManager_Kubernetes_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDiscoveryManager_Kubernetes_Call) RunAndReturn(run func(...string)) *MockDiscoveryManager_Kubernetes_Call {
	_c.Run(run)
	return _c
}

// MDNS provides a mock function with given fields: args
func (_m *MockDiscoveryManager) MDNS(args ...string) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockDiscoveryManager_MDNS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MDNS'
type MockDiscoveryManager_MDNS_Call struct {
	*mock.Call
}

// MDNS is a helper method to define mock.On call
//   - args ...string
func (_e *MockDiscoveryManager_Expecter) MDNS(args ...interface{}) *MockDiscoveryManager_MDNS_Call {
	return &MockDiscoveryManager_MDNS_Call{Call: _e.mock.On("MDNS",
		append([]interface{}{}, args...)...)}
}

func (_c *MockDiscoveryManager_MDNS_Call) Run(run func(args ...string)) *MockDiscoveryManager_MDNS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockDiscoveryManager_MDNS_Call) Return() *MockDiscoveryManager_MDNS_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDiscoveryManager_MDNS_Call) RunAndReturn(run func(...string)) *MockDiscoveryManager_MDNS_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: ctx, address, port
func (_m *MockDiscoveryManager) Start(ctx context.Context, address string, port int) error {
	ret := _m.Called(ctx, address, port)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, address, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscoveryManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockDiscoveryManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
//   - port int
func (_e *MockDiscoveryManager_Expecter) Start(ctx interface{}, address interface{}, port interface{}) *MockDiscoveryManager_Start_Call {
	return &MockDiscoveryManager_Start_Call{Call: _e.mock.On("Start", ctx, address, port)}
}

func (_c *MockDiscoveryManager_Start_Call) Run(run func(ctx context.Context, address string, port int)) *MockDiscoveryManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockDiscoveryManager_Start_Call) Return(_a0 error) *MockDiscoveryManager_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscoveryManager_Start_Call) RunAndReturn(run func(context.Context, string, int) error) *MockDiscoveryManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Static provides a mock function with given fields: peers
func (_m *MockDiscoveryManager) Static(peers []ports.Peer) {
	_m.Called(peers)
}

// MockDiscoveryManager_Static_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Static'
type MockDiscoveryManager_Static_Call struct {
	*mock.Call
}

// Static is a helper method to define mock.On call
//   - peers []ports.Peer
func (_e *MockDiscoveryManager_Expecter) Static(peers interface{}) *MockDiscoveryManager_Static_Call {
	return &MockDiscoveryManager_Static_Call{Call: _e.mock.On("Static", peers)}
}

func (_c *MockDiscoveryManager_Static_Call) Run(run func(peers []ports.Peer)) *MockDiscoveryManager_Static_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]ports.Peer))
	})
	return _c
}

func (_c *MockDiscoveryManager_Static_Call) Return() *MockDiscoveryManager_Static_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDiscoveryManager_Static_Call) RunAndReturn(run func([]ports.Peer)) *MockDiscoveryManager_Static_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockDiscoveryManager) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscoveryManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockDiscoveryManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockDiscoveryManager_Expecter) Stop() *MockDiscoveryManager_Stop_Call {
	return &MockDiscoveryManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockDiscoveryManager_Stop_Call) Run(run func()) *MockDiscoveryManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryManager_Stop_Call) Return(_a0 error) *MockDiscoveryManager_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscoveryManager_Stop_Call) RunAndReturn(run func() error) *MockDiscoveryManager_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDiscoveryManager creates a new instance of MockDiscoveryManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscoveryManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscoveryManager {
	mock := &MockDiscoveryManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
