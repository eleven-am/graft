// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockNodePort is an autogenerated mock type for the NodePort type
type MockNodePort struct {
	mock.Mock
}

type MockNodePort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodePort) EXPECT() *MockNodePort_Expecter {
	return &MockNodePort_Expecter{mock: &_m.Mock}
}

// CanStart provides a mock function with given fields: ctx, args
func (_m *MockNodePort) CanStart(ctx context.Context, args ...interface{}) bool {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CanStart")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) bool); ok {
		r0 = rf(ctx, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockNodePort_CanStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanStart'
type MockNodePort_CanStart_Call struct {
	*mock.Call
}

// CanStart is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...interface{}
func (_e *MockNodePort_Expecter) CanStart(ctx interface{}, args ...interface{}) *MockNodePort_CanStart_Call {
	return &MockNodePort_CanStart_Call{Call: _e.mock.On("CanStart",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *MockNodePort_CanStart_Call) Run(run func(ctx context.Context, args ...interface{})) *MockNodePort_CanStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockNodePort_CanStart_Call) Return(_a0 bool) *MockNodePort_CanStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodePort_CanStart_Call) RunAndReturn(run func(context.Context, ...interface{}) bool) *MockNodePort_CanStart_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, args
func (_m *MockNodePort) Execute(ctx context.Context, args ...interface{}) (*ports.NodeResult, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *ports.NodeResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (*ports.NodeResult, error)); ok {
		return rf(ctx, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *ports.NodeResult); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.NodeResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodePort_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockNodePort_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...interface{}
func (_e *MockNodePort_Expecter) Execute(ctx interface{}, args ...interface{}) *MockNodePort_Execute_Call {
	return &MockNodePort_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *MockNodePort_Execute_Call) Run(run func(ctx context.Context, args ...interface{})) *MockNodePort_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockNodePort_Execute_Call) Return(_a0 *ports.NodeResult, _a1 error) *MockNodePort_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNodePort_Execute_Call) RunAndReturn(run func(context.Context, ...interface{}) (*ports.NodeResult, error)) *MockNodePort_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *MockNodePort) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNodePort_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockNodePort_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockNodePort_Expecter) GetName() *MockNodePort_GetName_Call {
	return &MockNodePort_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockNodePort_GetName_Call) Run(run func()) *MockNodePort_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNodePort_GetName_Call) Return(_a0 string) *MockNodePort_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodePort_GetName_Call) RunAndReturn(run func() string) *MockNodePort_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNodePort creates a new instance of MockNodePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodePort {
	mock := &MockNodePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
