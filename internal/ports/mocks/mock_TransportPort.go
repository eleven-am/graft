// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockTransportPort is an autogenerated mock type for the TransportPort type
type MockTransportPort struct {
	mock.Mock
}

type MockTransportPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransportPort) EXPECT() *MockTransportPort_Expecter {
	return &MockTransportPort_Expecter{mock: &_m.Mock}
}

// GetAddress provides a mock function with no fields
func (_m *MockTransportPort) GetAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTransportPort_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type MockTransportPort_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
func (_e *MockTransportPort_Expecter) GetAddress() *MockTransportPort_GetAddress_Call {
	return &MockTransportPort_GetAddress_Call{Call: _e.mock.On("GetAddress")}
}

func (_c *MockTransportPort_GetAddress_Call) Run(run func()) *MockTransportPort_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransportPort_GetAddress_Call) Return(_a0 string) *MockTransportPort_GetAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransportPort_GetAddress_Call) RunAndReturn(run func() string) *MockTransportPort_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// RequestJoinFromPeer provides a mock function with given fields: ctx, peerAddress, nodeInfo
func (_m *MockTransportPort) RequestJoinFromPeer(ctx context.Context, peerAddress string, nodeInfo ports.Peer) error {
	ret := _m.Called(ctx, peerAddress, nodeInfo)

	if len(ret) == 0 {
		panic("no return value specified for RequestJoinFromPeer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ports.Peer) error); ok {
		r0 = rf(ctx, peerAddress, nodeInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransportPort_RequestJoinFromPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestJoinFromPeer'
type MockTransportPort_RequestJoinFromPeer_Call struct {
	*mock.Call
}

// RequestJoinFromPeer is a helper method to define mock.On call
//   - ctx context.Context
//   - peerAddress string
//   - nodeInfo ports.Peer
func (_e *MockTransportPort_Expecter) RequestJoinFromPeer(ctx interface{}, peerAddress interface{}, nodeInfo interface{}) *MockTransportPort_RequestJoinFromPeer_Call {
	return &MockTransportPort_RequestJoinFromPeer_Call{Call: _e.mock.On("RequestJoinFromPeer", ctx, peerAddress, nodeInfo)}
}

func (_c *MockTransportPort_RequestJoinFromPeer_Call) Run(run func(ctx context.Context, peerAddress string, nodeInfo ports.Peer)) *MockTransportPort_RequestJoinFromPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(ports.Peer))
	})
	return _c
}

func (_c *MockTransportPort_RequestJoinFromPeer_Call) Return(_a0 error) *MockTransportPort_RequestJoinFromPeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransportPort_RequestJoinFromPeer_Call) RunAndReturn(run func(context.Context, string, ports.Peer) error) *MockTransportPort_RequestJoinFromPeer_Call {
	_c.Call.Return(run)
	return _c
}

// SendToLeader provides a mock function with given fields: ctx, message
func (_m *MockTransportPort) SendToLeader(ctx context.Context, message ports.Message) (*ports.Response, error) {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SendToLeader")
	}

	var r0 *ports.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ports.Message) (*ports.Response, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ports.Message) *ports.Response); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ports.Message) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransportPort_SendToLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendToLeader'
type MockTransportPort_SendToLeader_Call struct {
	*mock.Call
}

// SendToLeader is a helper method to define mock.On call
//   - ctx context.Context
//   - message ports.Message
func (_e *MockTransportPort_Expecter) SendToLeader(ctx interface{}, message interface{}) *MockTransportPort_SendToLeader_Call {
	return &MockTransportPort_SendToLeader_Call{Call: _e.mock.On("SendToLeader", ctx, message)}
}

func (_c *MockTransportPort_SendToLeader_Call) Run(run func(ctx context.Context, message ports.Message)) *MockTransportPort_SendToLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ports.Message))
	})
	return _c
}

func (_c *MockTransportPort_SendToLeader_Call) Return(_a0 *ports.Response, _a1 error) *MockTransportPort_SendToLeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransportPort_SendToLeader_Call) RunAndReturn(run func(context.Context, ports.Message) (*ports.Response, error)) *MockTransportPort_SendToLeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetMessageHandler provides a mock function with given fields: handler
func (_m *MockTransportPort) SetMessageHandler(handler ports.MessageHandler) {
	_m.Called(handler)
}

// MockTransportPort_SetMessageHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMessageHandler'
type MockTransportPort_SetMessageHandler_Call struct {
	*mock.Call
}

// SetMessageHandler is a helper method to define mock.On call
//   - handler ports.MessageHandler
func (_e *MockTransportPort_Expecter) SetMessageHandler(handler interface{}) *MockTransportPort_SetMessageHandler_Call {
	return &MockTransportPort_SetMessageHandler_Call{Call: _e.mock.On("SetMessageHandler", handler)}
}

func (_c *MockTransportPort_SetMessageHandler_Call) Run(run func(handler ports.MessageHandler)) *MockTransportPort_SetMessageHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ports.MessageHandler))
	})
	return _c
}

func (_c *MockTransportPort_SetMessageHandler_Call) Return() *MockTransportPort_SetMessageHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransportPort_SetMessageHandler_Call) RunAndReturn(run func(ports.MessageHandler)) *MockTransportPort_SetMessageHandler_Call {
	_c.Run(run)
	return _c
}

// SetRaft provides a mock function with given fields: raft
func (_m *MockTransportPort) SetRaft(raft ports.RaftPort) {
	_m.Called(raft)
}

// MockTransportPort_SetRaft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRaft'
type MockTransportPort_SetRaft_Call struct {
	*mock.Call
}

// SetRaft is a helper method to define mock.On call
//   - raft ports.RaftPort
func (_e *MockTransportPort_Expecter) SetRaft(raft interface{}) *MockTransportPort_SetRaft_Call {
	return &MockTransportPort_SetRaft_Call{Call: _e.mock.On("SetRaft", raft)}
}

func (_c *MockTransportPort_SetRaft_Call) Run(run func(raft ports.RaftPort)) *MockTransportPort_SetRaft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ports.RaftPort))
	})
	return _c
}

func (_c *MockTransportPort_SetRaft_Call) Return() *MockTransportPort_SetRaft_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransportPort_SetRaft_Call) RunAndReturn(run func(ports.RaftPort)) *MockTransportPort_SetRaft_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: ctx, address, port
func (_m *MockTransportPort) Start(ctx context.Context, address string, port int) error {
	ret := _m.Called(ctx, address, port)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, address, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransportPort_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockTransportPort_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
//   - port int
func (_e *MockTransportPort_Expecter) Start(ctx interface{}, address interface{}, port interface{}) *MockTransportPort_Start_Call {
	return &MockTransportPort_Start_Call{Call: _e.mock.On("Start", ctx, address, port)}
}

func (_c *MockTransportPort_Start_Call) Run(run func(ctx context.Context, address string, port int)) *MockTransportPort_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockTransportPort_Start_Call) Return(_a0 error) *MockTransportPort_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransportPort_Start_Call) RunAndReturn(run func(context.Context, string, int) error) *MockTransportPort_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockTransportPort) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransportPort_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockTransportPort_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockTransportPort_Expecter) Stop() *MockTransportPort_Stop_Call {
	return &MockTransportPort_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockTransportPort_Stop_Call) Run(run func()) *MockTransportPort_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransportPort_Stop_Call) Return(_a0 error) *MockTransportPort_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransportPort_Stop_Call) RunAndReturn(run func() error) *MockTransportPort_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLeader provides a mock function with given fields: nodeID, address
func (_m *MockTransportPort) UpdateLeader(nodeID string, address string) {
	_m.Called(nodeID, address)
}

// MockTransportPort_UpdateLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLeader'
type MockTransportPort_UpdateLeader_Call struct {
	*mock.Call
}

// UpdateLeader is a helper method to define mock.On call
//   - nodeID string
//   - address string
func (_e *MockTransportPort_Expecter) UpdateLeader(nodeID interface{}, address interface{}) *MockTransportPort_UpdateLeader_Call {
	return &MockTransportPort_UpdateLeader_Call{Call: _e.mock.On("UpdateLeader", nodeID, address)}
}

func (_c *MockTransportPort_UpdateLeader_Call) Run(run func(nodeID string, address string)) *MockTransportPort_UpdateLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockTransportPort_UpdateLeader_Call) Return() *MockTransportPort_UpdateLeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransportPort_UpdateLeader_Call) RunAndReturn(run func(string, string)) *MockTransportPort_UpdateLeader_Call {
	_c.Run(run)
	return _c
}

// NewMockTransportPort creates a new instance of MockTransportPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransportPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransportPort {
	mock := &MockTransportPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
