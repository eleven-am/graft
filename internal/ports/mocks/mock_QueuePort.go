// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockQueuePort is an autogenerated mock type for the QueuePort type
type MockQueuePort struct {
	mock.Mock
}

type MockQueuePort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueuePort) EXPECT() *MockQueuePort_Expecter {
	return &MockQueuePort_Expecter{mock: &_m.Mock}
}

// Dequeue provides a mock function with given fields: ctx, opts
func (_m *MockQueuePort) Dequeue(ctx context.Context, opts ...ports.DequeueOption) (*ports.QueueItem, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Dequeue")
	}

	var r0 *ports.QueueItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...ports.DequeueOption) (*ports.QueueItem, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...ports.DequeueOption) *ports.QueueItem); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.QueueItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...ports.DequeueOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueuePort_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type MockQueuePort_Dequeue_Call struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...ports.DequeueOption
func (_e *MockQueuePort_Expecter) Dequeue(ctx interface{}, opts ...interface{}) *MockQueuePort_Dequeue_Call {
	return &MockQueuePort_Dequeue_Call{Call: _e.mock.On("Dequeue",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockQueuePort_Dequeue_Call) Run(run func(ctx context.Context, opts ...ports.DequeueOption)) *MockQueuePort_Dequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ports.DequeueOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(ports.DequeueOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockQueuePort_Dequeue_Call) Return(_a0 *ports.QueueItem, _a1 error) *MockQueuePort_Dequeue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueuePort_Dequeue_Call) RunAndReturn(run func(context.Context, ...ports.DequeueOption) (*ports.QueueItem, error)) *MockQueuePort_Dequeue_Call {
	_c.Call.Return(run)
	return _c
}

// DequeueBatch provides a mock function with given fields: ctx, maxItems, opts
func (_m *MockQueuePort) DequeueBatch(ctx context.Context, maxItems int, opts ...ports.DequeueOption) ([]ports.QueueItem, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, maxItems)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DequeueBatch")
	}

	var r0 []ports.QueueItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ...ports.DequeueOption) ([]ports.QueueItem, error)); ok {
		return rf(ctx, maxItems, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, ...ports.DequeueOption) []ports.QueueItem); ok {
		r0 = rf(ctx, maxItems, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ports.QueueItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, ...ports.DequeueOption) error); ok {
		r1 = rf(ctx, maxItems, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueuePort_DequeueBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DequeueBatch'
type MockQueuePort_DequeueBatch_Call struct {
	*mock.Call
}

// DequeueBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - maxItems int
//   - opts ...ports.DequeueOption
func (_e *MockQueuePort_Expecter) DequeueBatch(ctx interface{}, maxItems interface{}, opts ...interface{}) *MockQueuePort_DequeueBatch_Call {
	return &MockQueuePort_DequeueBatch_Call{Call: _e.mock.On("DequeueBatch",
		append([]interface{}{ctx, maxItems}, opts...)...)}
}

func (_c *MockQueuePort_DequeueBatch_Call) Run(run func(ctx context.Context, maxItems int, opts ...ports.DequeueOption)) *MockQueuePort_DequeueBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ports.DequeueOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ports.DequeueOption)
			}
		}
		run(args[0].(context.Context), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *MockQueuePort_DequeueBatch_Call) Return(_a0 []ports.QueueItem, _a1 error) *MockQueuePort_DequeueBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueuePort_DequeueBatch_Call) RunAndReturn(run func(context.Context, int, ...ports.DequeueOption) ([]ports.QueueItem, error)) *MockQueuePort_DequeueBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: ctx, item
func (_m *MockQueuePort) Enqueue(ctx context.Context, item ports.QueueItem) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ports.QueueItem) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueuePort_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockQueuePort_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - item ports.QueueItem
func (_e *MockQueuePort_Expecter) Enqueue(ctx interface{}, item interface{}) *MockQueuePort_Enqueue_Call {
	return &MockQueuePort_Enqueue_Call{Call: _e.mock.On("Enqueue", ctx, item)}
}

func (_c *MockQueuePort_Enqueue_Call) Run(run func(ctx context.Context, item ports.QueueItem)) *MockQueuePort_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ports.QueueItem))
	})
	return _c
}

func (_c *MockQueuePort_Enqueue_Call) Return(_a0 error) *MockQueuePort_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueuePort_Enqueue_Call) RunAndReturn(run func(context.Context, ports.QueueItem) error) *MockQueuePort_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueBatch provides a mock function with given fields: ctx, items
func (_m *MockQueuePort) EnqueueBatch(ctx context.Context, items []ports.QueueItem) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []ports.QueueItem) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueuePort_EnqueueBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueBatch'
type MockQueuePort_EnqueueBatch_Call struct {
	*mock.Call
}

// EnqueueBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - items []ports.QueueItem
func (_e *MockQueuePort_Expecter) EnqueueBatch(ctx interface{}, items interface{}) *MockQueuePort_EnqueueBatch_Call {
	return &MockQueuePort_EnqueueBatch_Call{Call: _e.mock.On("EnqueueBatch", ctx, items)}
}

func (_c *MockQueuePort_EnqueueBatch_Call) Run(run func(ctx context.Context, items []ports.QueueItem)) *MockQueuePort_EnqueueBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ports.QueueItem))
	})
	return _c
}

func (_c *MockQueuePort_EnqueueBatch_Call) Return(_a0 error) *MockQueuePort_EnqueueBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueuePort_EnqueueBatch_Call) RunAndReturn(run func(context.Context, []ports.QueueItem) error) *MockQueuePort_EnqueueBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetItems provides a mock function with given fields: ctx
func (_m *MockQueuePort) GetItems(ctx context.Context) ([]ports.QueueItem, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 []ports.QueueItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]ports.QueueItem, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []ports.QueueItem); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ports.QueueItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueuePort_GetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItems'
type MockQueuePort_GetItems_Call struct {
	*mock.Call
}

// GetItems is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQueuePort_Expecter) GetItems(ctx interface{}) *MockQueuePort_GetItems_Call {
	return &MockQueuePort_GetItems_Call{Call: _e.mock.On("GetItems", ctx)}
}

func (_c *MockQueuePort_GetItems_Call) Run(run func(ctx context.Context)) *MockQueuePort_GetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQueuePort_GetItems_Call) Return(_a0 []ports.QueueItem, _a1 error) *MockQueuePort_GetItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueuePort_GetItems_Call) RunAndReturn(run func(context.Context) ([]ports.QueueItem, error)) *MockQueuePort_GetItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueuePartitions provides a mock function with given fields: ctx
func (_m *MockQueuePort) GetQueuePartitions(ctx context.Context) ([]ports.QueuePartition, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetQueuePartitions")
	}

	var r0 []ports.QueuePartition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]ports.QueuePartition, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []ports.QueuePartition); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ports.QueuePartition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueuePort_GetQueuePartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueuePartitions'
type MockQueuePort_GetQueuePartitions_Call struct {
	*mock.Call
}

// GetQueuePartitions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQueuePort_Expecter) GetQueuePartitions(ctx interface{}) *MockQueuePort_GetQueuePartitions_Call {
	return &MockQueuePort_GetQueuePartitions_Call{Call: _e.mock.On("GetQueuePartitions", ctx)}
}

func (_c *MockQueuePort_GetQueuePartitions_Call) Run(run func(ctx context.Context)) *MockQueuePort_GetQueuePartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQueuePort_GetQueuePartitions_Call) Return(_a0 []ports.QueuePartition, _a1 error) *MockQueuePort_GetQueuePartitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueuePort_GetQueuePartitions_Call) RunAndReturn(run func(context.Context) ([]ports.QueuePartition, error)) *MockQueuePort_GetQueuePartitions_Call {
	_c.Call.Return(run)
	return _c
}

// IsEmpty provides a mock function with given fields: ctx
func (_m *MockQueuePort) IsEmpty(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueuePort_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type MockQueuePort_IsEmpty_Call struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQueuePort_Expecter) IsEmpty(ctx interface{}) *MockQueuePort_IsEmpty_Call {
	return &MockQueuePort_IsEmpty_Call{Call: _e.mock.On("IsEmpty", ctx)}
}

func (_c *MockQueuePort_IsEmpty_Call) Run(run func(ctx context.Context)) *MockQueuePort_IsEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQueuePort_IsEmpty_Call) Return(_a0 bool, _a1 error) *MockQueuePort_IsEmpty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueuePort_IsEmpty_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockQueuePort_IsEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessExpiredClaims provides a mock function with given fields: ctx
func (_m *MockQueuePort) ProcessExpiredClaims(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProcessExpiredClaims")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueuePort_ProcessExpiredClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessExpiredClaims'
type MockQueuePort_ProcessExpiredClaims_Call struct {
	*mock.Call
}

// ProcessExpiredClaims is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQueuePort_Expecter) ProcessExpiredClaims(ctx interface{}) *MockQueuePort_ProcessExpiredClaims_Call {
	return &MockQueuePort_ProcessExpiredClaims_Call{Call: _e.mock.On("ProcessExpiredClaims", ctx)}
}

func (_c *MockQueuePort_ProcessExpiredClaims_Call) Run(run func(ctx context.Context)) *MockQueuePort_ProcessExpiredClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQueuePort_ProcessExpiredClaims_Call) Return(_a0 error) *MockQueuePort_ProcessExpiredClaims_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueuePort_ProcessExpiredClaims_Call) RunAndReturn(run func(context.Context) error) *MockQueuePort_ProcessExpiredClaims_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseWorkClaim provides a mock function with given fields: ctx, workItemID, nodeID
func (_m *MockQueuePort) ReleaseWorkClaim(ctx context.Context, workItemID string, nodeID string) error {
	ret := _m.Called(ctx, workItemID, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseWorkClaim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, workItemID, nodeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueuePort_ReleaseWorkClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseWorkClaim'
type MockQueuePort_ReleaseWorkClaim_Call struct {
	*mock.Call
}

// ReleaseWorkClaim is a helper method to define mock.On call
//   - ctx context.Context
//   - workItemID string
//   - nodeID string
func (_e *MockQueuePort_Expecter) ReleaseWorkClaim(ctx interface{}, workItemID interface{}, nodeID interface{}) *MockQueuePort_ReleaseWorkClaim_Call {
	return &MockQueuePort_ReleaseWorkClaim_Call{Call: _e.mock.On("ReleaseWorkClaim", ctx, workItemID, nodeID)}
}

func (_c *MockQueuePort_ReleaseWorkClaim_Call) Run(run func(ctx context.Context, workItemID string, nodeID string)) *MockQueuePort_ReleaseWorkClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockQueuePort_ReleaseWorkClaim_Call) Return(_a0 error) *MockQueuePort_ReleaseWorkClaim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueuePort_ReleaseWorkClaim_Call) RunAndReturn(run func(context.Context, string, string) error) *MockQueuePort_ReleaseWorkClaim_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveItem provides a mock function with given fields: ctx, itemID
func (_m *MockQueuePort) RemoveItem(ctx context.Context, itemID string) error {
	ret := _m.Called(ctx, itemID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueuePort_RemoveItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveItem'
type MockQueuePort_RemoveItem_Call struct {
	*mock.Call
}

// RemoveItem is a helper method to define mock.On call
//   - ctx context.Context
//   - itemID string
func (_e *MockQueuePort_Expecter) RemoveItem(ctx interface{}, itemID interface{}) *MockQueuePort_RemoveItem_Call {
	return &MockQueuePort_RemoveItem_Call{Call: _e.mock.On("RemoveItem", ctx, itemID)}
}

func (_c *MockQueuePort_RemoveItem_Call) Run(run func(ctx context.Context, itemID string)) *MockQueuePort_RemoveItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueuePort_RemoveItem_Call) Return(_a0 error) *MockQueuePort_RemoveItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueuePort_RemoveItem_Call) RunAndReturn(run func(context.Context, string) error) *MockQueuePort_RemoveItem_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyWorkClaim provides a mock function with given fields: ctx, workItemID, nodeID
func (_m *MockQueuePort) VerifyWorkClaim(ctx context.Context, workItemID string, nodeID string) error {
	ret := _m.Called(ctx, workItemID, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for VerifyWorkClaim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, workItemID, nodeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueuePort_VerifyWorkClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyWorkClaim'
type MockQueuePort_VerifyWorkClaim_Call struct {
	*mock.Call
}

// VerifyWorkClaim is a helper method to define mock.On call
//   - ctx context.Context
//   - workItemID string
//   - nodeID string
func (_e *MockQueuePort_Expecter) VerifyWorkClaim(ctx interface{}, workItemID interface{}, nodeID interface{}) *MockQueuePort_VerifyWorkClaim_Call {
	return &MockQueuePort_VerifyWorkClaim_Call{Call: _e.mock.On("VerifyWorkClaim", ctx, workItemID, nodeID)}
}

func (_c *MockQueuePort_VerifyWorkClaim_Call) Run(run func(ctx context.Context, workItemID string, nodeID string)) *MockQueuePort_VerifyWorkClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockQueuePort_VerifyWorkClaim_Call) Return(_a0 error) *MockQueuePort_VerifyWorkClaim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueuePort_VerifyWorkClaim_Call) RunAndReturn(run func(context.Context, string, string) error) *MockQueuePort_VerifyWorkClaim_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueuePort creates a new instance of MockQueuePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueuePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueuePort {
	mock := &MockQueuePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
