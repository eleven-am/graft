// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockNodeRegistryPort is an autogenerated mock type for the NodeRegistryPort type
type MockNodeRegistryPort struct {
	mock.Mock
}

type MockNodeRegistryPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodeRegistryPort) EXPECT() *MockNodeRegistryPort_Expecter {
	return &MockNodeRegistryPort_Expecter{mock: &_m.Mock}
}

// GetNode provides a mock function with given fields: nodeName
func (_m *MockNodeRegistryPort) GetNode(nodeName string) (ports.NodePort, error) {
	ret := _m.Called(nodeName)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 ports.NodePort
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (ports.NodePort, error)); ok {
		return rf(nodeName)
	}
	if rf, ok := ret.Get(0).(func(string) ports.NodePort); ok {
		r0 = rf(nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ports.NodePort)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodeRegistryPort_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type MockNodeRegistryPort_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - nodeName string
func (_e *MockNodeRegistryPort_Expecter) GetNode(nodeName interface{}) *MockNodeRegistryPort_GetNode_Call {
	return &MockNodeRegistryPort_GetNode_Call{Call: _e.mock.On("GetNode", nodeName)}
}

func (_c *MockNodeRegistryPort_GetNode_Call) Run(run func(nodeName string)) *MockNodeRegistryPort_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNodeRegistryPort_GetNode_Call) Return(_a0 ports.NodePort, _a1 error) *MockNodeRegistryPort_GetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNodeRegistryPort_GetNode_Call) RunAndReturn(run func(string) (ports.NodePort, error)) *MockNodeRegistryPort_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeCount provides a mock function with no fields
func (_m *MockNodeRegistryPort) GetNodeCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodeCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockNodeRegistryPort_GetNodeCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeCount'
type MockNodeRegistryPort_GetNodeCount_Call struct {
	*mock.Call
}

// GetNodeCount is a helper method to define mock.On call
func (_e *MockNodeRegistryPort_Expecter) GetNodeCount() *MockNodeRegistryPort_GetNodeCount_Call {
	return &MockNodeRegistryPort_GetNodeCount_Call{Call: _e.mock.On("GetNodeCount")}
}

func (_c *MockNodeRegistryPort_GetNodeCount_Call) Run(run func()) *MockNodeRegistryPort_GetNodeCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNodeRegistryPort_GetNodeCount_Call) Return(_a0 int) *MockNodeRegistryPort_GetNodeCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeRegistryPort_GetNodeCount_Call) RunAndReturn(run func() int) *MockNodeRegistryPort_GetNodeCount_Call {
	_c.Call.Return(run)
	return _c
}

// HasNode provides a mock function with given fields: nodeName
func (_m *MockNodeRegistryPort) HasNode(nodeName string) bool {
	ret := _m.Called(nodeName)

	if len(ret) == 0 {
		panic("no return value specified for HasNode")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(nodeName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockNodeRegistryPort_HasNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasNode'
type MockNodeRegistryPort_HasNode_Call struct {
	*mock.Call
}

// HasNode is a helper method to define mock.On call
//   - nodeName string
func (_e *MockNodeRegistryPort_Expecter) HasNode(nodeName interface{}) *MockNodeRegistryPort_HasNode_Call {
	return &MockNodeRegistryPort_HasNode_Call{Call: _e.mock.On("HasNode", nodeName)}
}

func (_c *MockNodeRegistryPort_HasNode_Call) Run(run func(nodeName string)) *MockNodeRegistryPort_HasNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNodeRegistryPort_HasNode_Call) Return(_a0 bool) *MockNodeRegistryPort_HasNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeRegistryPort_HasNode_Call) RunAndReturn(run func(string) bool) *MockNodeRegistryPort_HasNode_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function with no fields
func (_m *MockNodeRegistryPort) ListNodes() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockNodeRegistryPort_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockNodeRegistryPort_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
func (_e *MockNodeRegistryPort_Expecter) ListNodes() *MockNodeRegistryPort_ListNodes_Call {
	return &MockNodeRegistryPort_ListNodes_Call{Call: _e.mock.On("ListNodes")}
}

func (_c *MockNodeRegistryPort_ListNodes_Call) Run(run func()) *MockNodeRegistryPort_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNodeRegistryPort_ListNodes_Call) Return(_a0 []string) *MockNodeRegistryPort_ListNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeRegistryPort_ListNodes_Call) RunAndReturn(run func() []string) *MockNodeRegistryPort_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterNode provides a mock function with given fields: node
func (_m *MockNodeRegistryPort) RegisterNode(node ports.NodePort) error {
	ret := _m.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for RegisterNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ports.NodePort) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNodeRegistryPort_RegisterNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterNode'
type MockNodeRegistryPort_RegisterNode_Call struct {
	*mock.Call
}

// RegisterNode is a helper method to define mock.On call
//   - node ports.NodePort
func (_e *MockNodeRegistryPort_Expecter) RegisterNode(node interface{}) *MockNodeRegistryPort_RegisterNode_Call {
	return &MockNodeRegistryPort_RegisterNode_Call{Call: _e.mock.On("RegisterNode", node)}
}

func (_c *MockNodeRegistryPort_RegisterNode_Call) Run(run func(node ports.NodePort)) *MockNodeRegistryPort_RegisterNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ports.NodePort))
	})
	return _c
}

func (_c *MockNodeRegistryPort_RegisterNode_Call) Return(_a0 error) *MockNodeRegistryPort_RegisterNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeRegistryPort_RegisterNode_Call) RunAndReturn(run func(ports.NodePort) error) *MockNodeRegistryPort_RegisterNode_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterNode provides a mock function with given fields: nodeName
func (_m *MockNodeRegistryPort) UnregisterNode(nodeName string) error {
	ret := _m.Called(nodeName)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNodeRegistryPort_UnregisterNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterNode'
type MockNodeRegistryPort_UnregisterNode_Call struct {
	*mock.Call
}

// UnregisterNode is a helper method to define mock.On call
//   - nodeName string
func (_e *MockNodeRegistryPort_Expecter) UnregisterNode(nodeName interface{}) *MockNodeRegistryPort_UnregisterNode_Call {
	return &MockNodeRegistryPort_UnregisterNode_Call{Call: _e.mock.On("UnregisterNode", nodeName)}
}

func (_c *MockNodeRegistryPort_UnregisterNode_Call) Run(run func(nodeName string)) *MockNodeRegistryPort_UnregisterNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNodeRegistryPort_UnregisterNode_Call) Return(_a0 error) *MockNodeRegistryPort_UnregisterNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeRegistryPort_UnregisterNode_Call) RunAndReturn(run func(string) error) *MockNodeRegistryPort_UnregisterNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNodeRegistryPort creates a new instance of MockNodeRegistryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeRegistryPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodeRegistryPort {
	mock := &MockNodeRegistryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
