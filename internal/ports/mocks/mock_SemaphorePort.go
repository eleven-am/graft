// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockSemaphorePort is an autogenerated mock type for the SemaphorePort type
type MockSemaphorePort struct {
	mock.Mock
}

type MockSemaphorePort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSemaphorePort) EXPECT() *MockSemaphorePort_Expecter {
	return &MockSemaphorePort_Expecter{mock: &_m.Mock}
}

// Acquire provides a mock function with given fields: ctx, semaphoreID, nodeID, duration
func (_m *MockSemaphorePort) Acquire(ctx context.Context, semaphoreID string, nodeID string, duration time.Duration) error {
	ret := _m.Called(ctx, semaphoreID, nodeID, duration)

	if len(ret) == 0 {
		panic("no return value specified for Acquire")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, semaphoreID, nodeID, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSemaphorePort_Acquire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acquire'
type MockSemaphorePort_Acquire_Call struct {
	*mock.Call
}

// Acquire is a helper method to define mock.On call
//   - ctx context.Context
//   - semaphoreID string
//   - nodeID string
//   - duration time.Duration
func (_e *MockSemaphorePort_Expecter) Acquire(ctx interface{}, semaphoreID interface{}, nodeID interface{}, duration interface{}) *MockSemaphorePort_Acquire_Call {
	return &MockSemaphorePort_Acquire_Call{Call: _e.mock.On("Acquire", ctx, semaphoreID, nodeID, duration)}
}

func (_c *MockSemaphorePort_Acquire_Call) Run(run func(ctx context.Context, semaphoreID string, nodeID string, duration time.Duration)) *MockSemaphorePort_Acquire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockSemaphorePort_Acquire_Call) Return(_a0 error) *MockSemaphorePort_Acquire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSemaphorePort_Acquire_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) error) *MockSemaphorePort_Acquire_Call {
	_c.Call.Return(run)
	return _c
}

// Extend provides a mock function with given fields: ctx, semaphoreID, nodeID, newDuration
func (_m *MockSemaphorePort) Extend(ctx context.Context, semaphoreID string, nodeID string, newDuration time.Duration) error {
	ret := _m.Called(ctx, semaphoreID, nodeID, newDuration)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, semaphoreID, nodeID, newDuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSemaphorePort_Extend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extend'
type MockSemaphorePort_Extend_Call struct {
	*mock.Call
}

// Extend is a helper method to define mock.On call
//   - ctx context.Context
//   - semaphoreID string
//   - nodeID string
//   - newDuration time.Duration
func (_e *MockSemaphorePort_Expecter) Extend(ctx interface{}, semaphoreID interface{}, nodeID interface{}, newDuration interface{}) *MockSemaphorePort_Extend_Call {
	return &MockSemaphorePort_Extend_Call{Call: _e.mock.On("Extend", ctx, semaphoreID, nodeID, newDuration)}
}

func (_c *MockSemaphorePort_Extend_Call) Run(run func(ctx context.Context, semaphoreID string, nodeID string, newDuration time.Duration)) *MockSemaphorePort_Extend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockSemaphorePort_Extend_Call) Return(_a0 error) *MockSemaphorePort_Extend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSemaphorePort_Extend_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) error) *MockSemaphorePort_Extend_Call {
	_c.Call.Return(run)
	return _c
}

// IsAcquired provides a mock function with given fields: ctx, semaphoreID
func (_m *MockSemaphorePort) IsAcquired(ctx context.Context, semaphoreID string) (bool, error) {
	ret := _m.Called(ctx, semaphoreID)

	if len(ret) == 0 {
		panic("no return value specified for IsAcquired")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, semaphoreID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, semaphoreID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, semaphoreID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSemaphorePort_IsAcquired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAcquired'
type MockSemaphorePort_IsAcquired_Call struct {
	*mock.Call
}

// IsAcquired is a helper method to define mock.On call
//   - ctx context.Context
//   - semaphoreID string
func (_e *MockSemaphorePort_Expecter) IsAcquired(ctx interface{}, semaphoreID interface{}) *MockSemaphorePort_IsAcquired_Call {
	return &MockSemaphorePort_IsAcquired_Call{Call: _e.mock.On("IsAcquired", ctx, semaphoreID)}
}

func (_c *MockSemaphorePort_IsAcquired_Call) Run(run func(ctx context.Context, semaphoreID string)) *MockSemaphorePort_IsAcquired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSemaphorePort_IsAcquired_Call) Return(_a0 bool, _a1 error) *MockSemaphorePort_IsAcquired_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSemaphorePort_IsAcquired_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockSemaphorePort_IsAcquired_Call {
	_c.Call.Return(run)
	return _c
}

// IsAcquiredByNode provides a mock function with given fields: ctx, semaphoreID, nodeID
func (_m *MockSemaphorePort) IsAcquiredByNode(ctx context.Context, semaphoreID string, nodeID string) (bool, error) {
	ret := _m.Called(ctx, semaphoreID, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for IsAcquiredByNode")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, semaphoreID, nodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, semaphoreID, nodeID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, semaphoreID, nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSemaphorePort_IsAcquiredByNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAcquiredByNode'
type MockSemaphorePort_IsAcquiredByNode_Call struct {
	*mock.Call
}

// IsAcquiredByNode is a helper method to define mock.On call
//   - ctx context.Context
//   - semaphoreID string
//   - nodeID string
func (_e *MockSemaphorePort_Expecter) IsAcquiredByNode(ctx interface{}, semaphoreID interface{}, nodeID interface{}) *MockSemaphorePort_IsAcquiredByNode_Call {
	return &MockSemaphorePort_IsAcquiredByNode_Call{Call: _e.mock.On("IsAcquiredByNode", ctx, semaphoreID, nodeID)}
}

func (_c *MockSemaphorePort_IsAcquiredByNode_Call) Run(run func(ctx context.Context, semaphoreID string, nodeID string)) *MockSemaphorePort_IsAcquiredByNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSemaphorePort_IsAcquiredByNode_Call) Return(_a0 bool, _a1 error) *MockSemaphorePort_IsAcquiredByNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSemaphorePort_IsAcquiredByNode_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockSemaphorePort_IsAcquiredByNode_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with given fields: ctx, semaphoreID, nodeID
func (_m *MockSemaphorePort) Release(ctx context.Context, semaphoreID string, nodeID string) error {
	ret := _m.Called(ctx, semaphoreID, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, semaphoreID, nodeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSemaphorePort_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockSemaphorePort_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - ctx context.Context
//   - semaphoreID string
//   - nodeID string
func (_e *MockSemaphorePort_Expecter) Release(ctx interface{}, semaphoreID interface{}, nodeID interface{}) *MockSemaphorePort_Release_Call {
	return &MockSemaphorePort_Release_Call{Call: _e.mock.On("Release", ctx, semaphoreID, nodeID)}
}

func (_c *MockSemaphorePort_Release_Call) Run(run func(ctx context.Context, semaphoreID string, nodeID string)) *MockSemaphorePort_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSemaphorePort_Release_Call) Return(_a0 error) *MockSemaphorePort_Release_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSemaphorePort_Release_Call) RunAndReturn(run func(context.Context, string, string) error) *MockSemaphorePort_Release_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSemaphorePort creates a new instance of MockSemaphorePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSemaphorePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSemaphorePort {
	mock := &MockSemaphorePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
