// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: events.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GraftEventStream_StreamEvents_FullMethodName        = "/events.GraftEventStream/StreamEvents"
	GraftEventStream_SubscribeToWorkflow_FullMethodName = "/events.GraftEventStream/SubscribeToWorkflow"
	GraftEventStream_BroadcastEvent_FullMethodName      = "/events.GraftEventStream/BroadcastEvent"
)

// GraftEventStreamClient is the client API for GraftEventStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraftEventStreamClient interface {
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EventMessage, EventMessage], error)
	SubscribeToWorkflow(ctx context.Context, in *WorkflowSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventMessage], error)
	BroadcastEvent(ctx context.Context, in *EventBroadcast, opts ...grpc.CallOption) (*BroadcastResponse, error)
}

type graftEventStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewGraftEventStreamClient(cc grpc.ClientConnInterface) GraftEventStreamClient {
	return &graftEventStreamClient{cc}
}

func (c *graftEventStreamClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EventMessage, EventMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GraftEventStream_ServiceDesc.Streams[0], GraftEventStream_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventMessage, EventMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GraftEventStream_StreamEventsClient = grpc.BidiStreamingClient[EventMessage, EventMessage]

func (c *graftEventStreamClient) SubscribeToWorkflow(ctx context.Context, in *WorkflowSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GraftEventStream_ServiceDesc.Streams[1], GraftEventStream_SubscribeToWorkflow_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkflowSubscription, EventMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GraftEventStream_SubscribeToWorkflowClient = grpc.ServerStreamingClient[EventMessage]

func (c *graftEventStreamClient) BroadcastEvent(ctx context.Context, in *EventBroadcast, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, GraftEventStream_BroadcastEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraftEventStreamServer is the server API for GraftEventStream service.
// All implementations must embed UnimplementedGraftEventStreamServer
// for forward compatibility.
type GraftEventStreamServer interface {
	StreamEvents(grpc.BidiStreamingServer[EventMessage, EventMessage]) error
	SubscribeToWorkflow(*WorkflowSubscription, grpc.ServerStreamingServer[EventMessage]) error
	BroadcastEvent(context.Context, *EventBroadcast) (*BroadcastResponse, error)
	mustEmbedUnimplementedGraftEventStreamServer()
}

// UnimplementedGraftEventStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGraftEventStreamServer struct{}

func (UnimplementedGraftEventStreamServer) StreamEvents(grpc.BidiStreamingServer[EventMessage, EventMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedGraftEventStreamServer) SubscribeToWorkflow(*WorkflowSubscription, grpc.ServerStreamingServer[EventMessage]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToWorkflow not implemented")
}
func (UnimplementedGraftEventStreamServer) BroadcastEvent(context.Context, *EventBroadcast) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastEvent not implemented")
}
func (UnimplementedGraftEventStreamServer) mustEmbedUnimplementedGraftEventStreamServer() {}
func (UnimplementedGraftEventStreamServer) testEmbeddedByValue()                          {}

// UnsafeGraftEventStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraftEventStreamServer will
// result in compilation errors.
type UnsafeGraftEventStreamServer interface {
	mustEmbedUnimplementedGraftEventStreamServer()
}

func RegisterGraftEventStreamServer(s grpc.ServiceRegistrar, srv GraftEventStreamServer) {
	// If the following call pancis, it indicates UnimplementedGraftEventStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GraftEventStream_ServiceDesc, srv)
}

func _GraftEventStream_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GraftEventStreamServer).StreamEvents(&grpc.GenericServerStream[EventMessage, EventMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GraftEventStream_StreamEventsServer = grpc.BidiStreamingServer[EventMessage, EventMessage]

func _GraftEventStream_SubscribeToWorkflow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkflowSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraftEventStreamServer).SubscribeToWorkflow(m, &grpc.GenericServerStream[WorkflowSubscription, EventMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GraftEventStream_SubscribeToWorkflowServer = grpc.ServerStreamingServer[EventMessage]

func _GraftEventStream_BroadcastEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventBroadcast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraftEventStreamServer).BroadcastEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraftEventStream_BroadcastEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraftEventStreamServer).BroadcastEvent(ctx, req.(*EventBroadcast))
	}
	return interceptor(ctx, in, info, handler)
}

// GraftEventStream_ServiceDesc is the grpc.ServiceDesc for GraftEventStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraftEventStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.GraftEventStream",
	HandlerType: (*GraftEventStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastEvent",
			Handler:    _GraftEventStream_BroadcastEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _GraftEventStream_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeToWorkflow",
			Handler:       _GraftEventStream_SubscribeToWorkflow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events.proto",
}
