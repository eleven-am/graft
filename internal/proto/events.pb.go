// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: events.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_NODE_STARTED       EventType = 0
	EventType_NODE_COMPLETED     EventType = 1
	EventType_NODE_FAILED        EventType = 2
	EventType_STATE_UPDATED      EventType = 3
	EventType_WORKFLOW_COMPLETED EventType = 4
	EventType_WORKFLOW_FAILED    EventType = 5
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "NODE_STARTED",
		1: "NODE_COMPLETED",
		2: "NODE_FAILED",
		3: "STATE_UPDATED",
		4: "WORKFLOW_COMPLETED",
		5: "WORKFLOW_FAILED",
	}
	EventType_value = map[string]int32{
		"NODE_STARTED":       0,
		"NODE_COMPLETED":     1,
		"NODE_FAILED":        2,
		"STATE_UPDATED":      3,
		"WORKFLOW_COMPLETED": 4,
		"WORKFLOW_FAILED":    5,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_events_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_events_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{0}
}

type EventMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*EventMessage_StateChange
	//	*EventMessage_Subscription
	//	*EventMessage_Unsubscription
	//	*EventMessage_Acknowledgement
	MessageType   isEventMessage_MessageType `protobuf_oneof:"message_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	mi := &file_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{0}
}

func (x *EventMessage) GetMessageType() isEventMessage_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *EventMessage) GetStateChange() *StateChangeEvent {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_StateChange); ok {
			return x.StateChange
		}
	}
	return nil
}

func (x *EventMessage) GetSubscription() *SubscriptionRequest {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_Subscription); ok {
			return x.Subscription
		}
	}
	return nil
}

func (x *EventMessage) GetUnsubscription() *UnsubscriptionRequest {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_Unsubscription); ok {
			return x.Unsubscription
		}
	}
	return nil
}

func (x *EventMessage) GetAcknowledgement() *EventAck {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_Acknowledgement); ok {
			return x.Acknowledgement
		}
	}
	return nil
}

type isEventMessage_MessageType interface {
	isEventMessage_MessageType()
}

type EventMessage_StateChange struct {
	StateChange *StateChangeEvent `protobuf:"bytes,1,opt,name=state_change,json=stateChange,proto3,oneof"`
}

type EventMessage_Subscription struct {
	Subscription *SubscriptionRequest `protobuf:"bytes,2,opt,name=subscription,proto3,oneof"`
}

type EventMessage_Unsubscription struct {
	Unsubscription *UnsubscriptionRequest `protobuf:"bytes,3,opt,name=unsubscription,proto3,oneof"`
}

type EventMessage_Acknowledgement struct {
	Acknowledgement *EventAck `protobuf:"bytes,4,opt,name=acknowledgement,proto3,oneof"`
}

func (*EventMessage_StateChange) isEventMessage_MessageType() {}

func (*EventMessage_Subscription) isEventMessage_MessageType() {}

func (*EventMessage_Unsubscription) isEventMessage_MessageType() {}

func (*EventMessage_Acknowledgement) isEventMessage_MessageType() {}

type StateChangeEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EventId        string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	WorkflowId     string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	ChangedBy      string                 `protobuf:"bytes,3,opt,name=changed_by,json=changedBy,proto3" json:"changed_by,omitempty"`
	NodeName       string                 `protobuf:"bytes,4,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	EventType      EventType              `protobuf:"varint,5,opt,name=event_type,json=eventType,proto3,enum=events.EventType" json:"event_type,omitempty"`
	Timestamp      int64                  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SequenceNumber int64                  `protobuf:"varint,7,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	StateData      []byte                 `protobuf:"bytes,8,opt,name=state_data,json=stateData,proto3" json:"state_data,omitempty"`
	SourceNodeId   string                 `protobuf:"bytes,9,opt,name=source_node_id,json=sourceNodeId,proto3" json:"source_node_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StateChangeEvent) Reset() {
	*x = StateChangeEvent{}
	mi := &file_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeEvent) ProtoMessage() {}

func (x *StateChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeEvent.ProtoReflect.Descriptor instead.
func (*StateChangeEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{1}
}

func (x *StateChangeEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *StateChangeEvent) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StateChangeEvent) GetChangedBy() string {
	if x != nil {
		return x.ChangedBy
	}
	return ""
}

func (x *StateChangeEvent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *StateChangeEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_NODE_STARTED
}

func (x *StateChangeEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StateChangeEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *StateChangeEvent) GetStateData() []byte {
	if x != nil {
		return x.StateData
	}
	return nil
}

func (x *StateChangeEvent) GetSourceNodeId() string {
	if x != nil {
		return x.SourceNodeId
	}
	return ""
}

type SubscriptionRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId   string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	WorkflowId       string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	SubscriberNodeId string                 `protobuf:"bytes,3,opt,name=subscriber_node_id,json=subscriberNodeId,proto3" json:"subscriber_node_id,omitempty"`
	FromSequence     int64                  `protobuf:"varint,4,opt,name=from_sequence,json=fromSequence,proto3" json:"from_sequence,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	mi := &file_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{2}
}

func (x *SubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *SubscriptionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SubscriptionRequest) GetSubscriberNodeId() string {
	if x != nil {
		return x.SubscriberNodeId
	}
	return ""
}

func (x *SubscriptionRequest) GetFromSequence() int64 {
	if x != nil {
		return x.FromSequence
	}
	return 0
}

type UnsubscriptionRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId   string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	WorkflowId       string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	SubscriberNodeId string                 `protobuf:"bytes,3,opt,name=subscriber_node_id,json=subscriberNodeId,proto3" json:"subscriber_node_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UnsubscriptionRequest) Reset() {
	*x = UnsubscriptionRequest{}
	mi := &file_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscriptionRequest) ProtoMessage() {}

func (x *UnsubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UnsubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{3}
}

func (x *UnsubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *UnsubscriptionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *UnsubscriptionRequest) GetSubscriberNodeId() string {
	if x != nil {
		return x.SubscriberNodeId
	}
	return ""
}

type EventAck struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EventId        string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Success        bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error          string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventAck) Reset() {
	*x = EventAck{}
	mi := &file_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAck) ProtoMessage() {}

func (x *EventAck) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAck.ProtoReflect.Descriptor instead.
func (*EventAck) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{4}
}

func (x *EventAck) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventAck) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *EventAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EventAck) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type WorkflowSubscription struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId       string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	SubscriberNodeId string                 `protobuf:"bytes,2,opt,name=subscriber_node_id,json=subscriberNodeId,proto3" json:"subscriber_node_id,omitempty"`
	FromSequence     int64                  `protobuf:"varint,3,opt,name=from_sequence,json=fromSequence,proto3" json:"from_sequence,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WorkflowSubscription) Reset() {
	*x = WorkflowSubscription{}
	mi := &file_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowSubscription) ProtoMessage() {}

func (x *WorkflowSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowSubscription.ProtoReflect.Descriptor instead.
func (*WorkflowSubscription) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{5}
}

func (x *WorkflowSubscription) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowSubscription) GetSubscriberNodeId() string {
	if x != nil {
		return x.SubscriberNodeId
	}
	return ""
}

func (x *WorkflowSubscription) GetFromSequence() int64 {
	if x != nil {
		return x.FromSequence
	}
	return 0
}

type EventBroadcast struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         *StateChangeEvent      `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	TargetNodes   []string               `protobuf:"bytes,2,rep,name=target_nodes,json=targetNodes,proto3" json:"target_nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBroadcast) Reset() {
	*x = EventBroadcast{}
	mi := &file_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBroadcast) ProtoMessage() {}

func (x *EventBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBroadcast.ProtoReflect.Descriptor instead.
func (*EventBroadcast) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{6}
}

func (x *EventBroadcast) GetEvent() *StateChangeEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EventBroadcast) GetTargetNodes() []string {
	if x != nil {
		return x.TargetNodes
	}
	return nil
}

type BroadcastResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	DeliveredCount int32                  `protobuf:"varint,2,opt,name=delivered_count,json=deliveredCount,proto3" json:"delivered_count,omitempty"`
	FailedNodes    []string               `protobuf:"bytes,3,rep,name=failed_nodes,json=failedNodes,proto3" json:"failed_nodes,omitempty"`
	Error          string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BroadcastResponse) Reset() {
	*x = BroadcastResponse{}
	mi := &file_events_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BroadcastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastResponse) ProtoMessage() {}

func (x *BroadcastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastResponse.ProtoReflect.Descriptor instead.
func (*BroadcastResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{7}
}

func (x *BroadcastResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BroadcastResponse) GetDeliveredCount() int32 {
	if x != nil {
		return x.DeliveredCount
	}
	return 0
}

func (x *BroadcastResponse) GetFailedNodes() []string {
	if x != nil {
		return x.FailedNodes
	}
	return nil
}

func (x *BroadcastResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_events_proto protoreflect.FileDescriptor

const file_events_proto_rawDesc = "" +
	"\n" +
	"\fevents.proto\x12\x06events\"\xa7\x02\n" +
	"\fEventMessage\x12=\n" +
	"\fstate_change\x18\x01 \x01(\v2\x18.events.StateChangeEventH\x00R\vstateChange\x12A\n" +
	"\fsubscription\x18\x02 \x01(\v2\x1b.events.SubscriptionRequestH\x00R\fsubscription\x12G\n" +
	"\x0eunsubscription\x18\x03 \x01(\v2\x1d.events.UnsubscriptionRequestH\x00R\x0eunsubscription\x12<\n" +
	"\x0facknowledgement\x18\x04 \x01(\v2\x10.events.EventAckH\x00R\x0facknowledgementB\x0e\n" +
	"\fmessage_type\"\xc8\x02\n" +
	"\x10StateChangeEvent\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12\x1d\n" +
	"\n" +
	"changed_by\x18\x03 \x01(\tR\tchangedBy\x12\x1b\n" +
	"\tnode_name\x18\x04 \x01(\tR\bnodeName\x120\n" +
	"\n" +
	"event_type\x18\x05 \x01(\x0e2\x11.events.EventTypeR\teventType\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\x03R\ttimestamp\x12'\n" +
	"\x0fsequence_number\x18\a \x01(\x03R\x0esequenceNumber\x12\x1d\n" +
	"\n" +
	"state_data\x18\b \x01(\fR\tstateData\x12$\n" +
	"\x0esource_node_id\x18\t \x01(\tR\fsourceNodeId\"\xb2\x01\n" +
	"\x13SubscriptionRequest\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\tR\x0esubscriptionId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12,\n" +
	"\x12subscriber_node_id\x18\x03 \x01(\tR\x10subscriberNodeId\x12#\n" +
	"\rfrom_sequence\x18\x04 \x01(\x03R\ffromSequence\"\x8f\x01\n" +
	"\x15UnsubscriptionRequest\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\tR\x0esubscriptionId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12,\n" +
	"\x12subscriber_node_id\x18\x03 \x01(\tR\x10subscriberNodeId\"~\n" +
	"\bEventAck\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12'\n" +
	"\x0fsubscription_id\x18\x02 \x01(\tR\x0esubscriptionId\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"\x8a\x01\n" +
	"\x14WorkflowSubscription\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12,\n" +
	"\x12subscriber_node_id\x18\x02 \x01(\tR\x10subscriberNodeId\x12#\n" +
	"\rfrom_sequence\x18\x03 \x01(\x03R\ffromSequence\"c\n" +
	"\x0eEventBroadcast\x12.\n" +
	"\x05event\x18\x01 \x01(\v2\x18.events.StateChangeEventR\x05event\x12!\n" +
	"\ftarget_nodes\x18\x02 \x03(\tR\vtargetNodes\"\x8f\x01\n" +
	"\x11BroadcastResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12'\n" +
	"\x0fdelivered_count\x18\x02 \x01(\x05R\x0edeliveredCount\x12!\n" +
	"\ffailed_nodes\x18\x03 \x03(\tR\vfailedNodes\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error*\x82\x01\n" +
	"\tEventType\x12\x10\n" +
	"\fNODE_STARTED\x10\x00\x12\x12\n" +
	"\x0eNODE_COMPLETED\x10\x01\x12\x0f\n" +
	"\vNODE_FAILED\x10\x02\x12\x11\n" +
	"\rSTATE_UPDATED\x10\x03\x12\x16\n" +
	"\x12WORKFLOW_COMPLETED\x10\x04\x12\x13\n" +
	"\x0fWORKFLOW_FAILED\x10\x052\xe4\x01\n" +
	"\x10GraftEventStream\x12>\n" +
	"\fStreamEvents\x12\x14.events.EventMessage\x1a\x14.events.EventMessage(\x010\x01\x12K\n" +
	"\x13SubscribeToWorkflow\x12\x1c.events.WorkflowSubscription\x1a\x14.events.EventMessage0\x01\x12C\n" +
	"\x0eBroadcastEvent\x12\x16.events.EventBroadcast\x1a\x19.events.BroadcastResponseB+Z)github.com/eleven-am/graft/internal/protob\x06proto3"

var (
	file_events_proto_rawDescOnce sync.Once
	file_events_proto_rawDescData []byte
)

func file_events_proto_rawDescGZIP() []byte {
	file_events_proto_rawDescOnce.Do(func() {
		file_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_events_proto_rawDesc), len(file_events_proto_rawDesc)))
	})
	return file_events_proto_rawDescData
}

var file_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_events_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_events_proto_goTypes = []any{
	(EventType)(0),                // 0: events.EventType
	(*EventMessage)(nil),          // 1: events.EventMessage
	(*StateChangeEvent)(nil),      // 2: events.StateChangeEvent
	(*SubscriptionRequest)(nil),   // 3: events.SubscriptionRequest
	(*UnsubscriptionRequest)(nil), // 4: events.UnsubscriptionRequest
	(*EventAck)(nil),              // 5: events.EventAck
	(*WorkflowSubscription)(nil),  // 6: events.WorkflowSubscription
	(*EventBroadcast)(nil),        // 7: events.EventBroadcast
	(*BroadcastResponse)(nil),     // 8: events.BroadcastResponse
}
var file_events_proto_depIdxs = []int32{
	2, // 0: events.EventMessage.state_change:type_name -> events.StateChangeEvent
	3, // 1: events.EventMessage.subscription:type_name -> events.SubscriptionRequest
	4, // 2: events.EventMessage.unsubscription:type_name -> events.UnsubscriptionRequest
	5, // 3: events.EventMessage.acknowledgement:type_name -> events.EventAck
	0, // 4: events.StateChangeEvent.event_type:type_name -> events.EventType
	2, // 5: events.EventBroadcast.event:type_name -> events.StateChangeEvent
	1, // 6: events.GraftEventStream.StreamEvents:input_type -> events.EventMessage
	6, // 7: events.GraftEventStream.SubscribeToWorkflow:input_type -> events.WorkflowSubscription
	7, // 8: events.GraftEventStream.BroadcastEvent:input_type -> events.EventBroadcast
	1, // 9: events.GraftEventStream.StreamEvents:output_type -> events.EventMessage
	1, // 10: events.GraftEventStream.SubscribeToWorkflow:output_type -> events.EventMessage
	8, // 11: events.GraftEventStream.BroadcastEvent:output_type -> events.BroadcastResponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_events_proto_init() }
func file_events_proto_init() {
	if File_events_proto != nil {
		return
	}
	file_events_proto_msgTypes[0].OneofWrappers = []any{
		(*EventMessage_StateChange)(nil),
		(*EventMessage_Subscription)(nil),
		(*EventMessage_Unsubscription)(nil),
		(*EventMessage_Acknowledgement)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_events_proto_rawDesc), len(file_events_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_events_proto_goTypes,
		DependencyIndexes: file_events_proto_depIdxs,
		EnumInfos:         file_events_proto_enumTypes,
		MessageInfos:      file_events_proto_msgTypes,
	}.Build()
	File_events_proto = out.File
	file_events_proto_goTypes = nil
	file_events_proto_depIdxs = nil
}
