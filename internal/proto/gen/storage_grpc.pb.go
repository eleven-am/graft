// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: storage.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageService_ReadFromNode_FullMethodName   = "/graft.proto.StorageService/ReadFromNode"
	StorageService_WriteToNode_FullMethodName    = "/graft.proto.StorageService/WriteToNode"
	StorageService_DeleteFromNode_FullMethodName = "/graft.proto.StorageService/DeleteFromNode"
	StorageService_BatchOperation_FullMethodName = "/graft.proto.StorageService/BatchOperation"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	ReadFromNode(ctx context.Context, in *ReadFromNodeRequest, opts ...grpc.CallOption) (*ReadFromNodeResponse, error)
	WriteToNode(ctx context.Context, in *WriteToNodeRequest, opts ...grpc.CallOption) (*WriteToNodeResponse, error)
	DeleteFromNode(ctx context.Context, in *DeleteFromNodeRequest, opts ...grpc.CallOption) (*DeleteFromNodeResponse, error)
	BatchOperation(ctx context.Context, in *BatchOperationRequest, opts ...grpc.CallOption) (*BatchOperationResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) ReadFromNode(ctx context.Context, in *ReadFromNodeRequest, opts ...grpc.CallOption) (*ReadFromNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadFromNodeResponse)
	err := c.cc.Invoke(ctx, StorageService_ReadFromNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) WriteToNode(ctx context.Context, in *WriteToNodeRequest, opts ...grpc.CallOption) (*WriteToNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteToNodeResponse)
	err := c.cc.Invoke(ctx, StorageService_WriteToNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteFromNode(ctx context.Context, in *DeleteFromNodeRequest, opts ...grpc.CallOption) (*DeleteFromNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFromNodeResponse)
	err := c.cc.Invoke(ctx, StorageService_DeleteFromNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) BatchOperation(ctx context.Context, in *BatchOperationRequest, opts ...grpc.CallOption) (*BatchOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchOperationResponse)
	err := c.cc.Invoke(ctx, StorageService_BatchOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility.
type StorageServiceServer interface {
	ReadFromNode(context.Context, *ReadFromNodeRequest) (*ReadFromNodeResponse, error)
	WriteToNode(context.Context, *WriteToNodeRequest) (*WriteToNodeResponse, error)
	DeleteFromNode(context.Context, *DeleteFromNodeRequest) (*DeleteFromNodeResponse, error)
	BatchOperation(context.Context, *BatchOperationRequest) (*BatchOperationResponse, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageServiceServer struct{}

func (UnimplementedStorageServiceServer) ReadFromNode(context.Context, *ReadFromNodeRequest) (*ReadFromNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFromNode not implemented")
}
func (UnimplementedStorageServiceServer) WriteToNode(context.Context, *WriteToNodeRequest) (*WriteToNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteToNode not implemented")
}
func (UnimplementedStorageServiceServer) DeleteFromNode(context.Context, *DeleteFromNodeRequest) (*DeleteFromNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromNode not implemented")
}
func (UnimplementedStorageServiceServer) BatchOperation(context.Context, *BatchOperationRequest) (*BatchOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperation not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}
func (UnimplementedStorageServiceServer) testEmbeddedByValue()                        {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_ReadFromNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFromNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReadFromNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_ReadFromNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReadFromNode(ctx, req.(*ReadFromNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_WriteToNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteToNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).WriteToNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_WriteToNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).WriteToNode(ctx, req.(*WriteToNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteFromNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteFromNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_DeleteFromNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteFromNode(ctx, req.(*DeleteFromNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_BatchOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).BatchOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_BatchOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).BatchOperation(ctx, req.(*BatchOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graft.proto.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadFromNode",
			Handler:    _StorageService_ReadFromNode_Handler,
		},
		{
			MethodName: "WriteToNode",
			Handler:    _StorageService_WriteToNode_Handler,
		},
		{
			MethodName: "DeleteFromNode",
			Handler:    _StorageService_DeleteFromNode_Handler,
		},
		{
			MethodName: "BatchOperation",
			Handler:    _StorageService_BatchOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
