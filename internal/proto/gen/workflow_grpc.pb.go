// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: workflow.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkflowService_ProposeStateUpdate_FullMethodName = "/graft.proto.WorkflowService/ProposeStateUpdate"
	WorkflowService_GetWorkflowState_FullMethodName   = "/graft.proto.WorkflowService/GetWorkflowState"
	WorkflowService_SubmitTrigger_FullMethodName      = "/graft.proto.WorkflowService/SubmitTrigger"
)

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	ProposeStateUpdate(ctx context.Context, in *ProposeStateUpdateRequest, opts ...grpc.CallOption) (*ProposeStateUpdateResponse, error)
	GetWorkflowState(ctx context.Context, in *GetWorkflowStateRequest, opts ...grpc.CallOption) (*GetWorkflowStateResponse, error)
	SubmitTrigger(ctx context.Context, in *SubmitTriggerRequest, opts ...grpc.CallOption) (*SubmitTriggerResponse, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) ProposeStateUpdate(ctx context.Context, in *ProposeStateUpdateRequest, opts ...grpc.CallOption) (*ProposeStateUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProposeStateUpdateResponse)
	err := c.cc.Invoke(ctx, WorkflowService_ProposeStateUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowState(ctx context.Context, in *GetWorkflowStateRequest, opts ...grpc.CallOption) (*GetWorkflowStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowStateResponse)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) SubmitTrigger(ctx context.Context, in *SubmitTriggerRequest, opts ...grpc.CallOption) (*SubmitTriggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitTriggerResponse)
	err := c.cc.Invoke(ctx, WorkflowService_SubmitTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
// All implementations must embed UnimplementedWorkflowServiceServer
// for forward compatibility.
type WorkflowServiceServer interface {
	ProposeStateUpdate(context.Context, *ProposeStateUpdateRequest) (*ProposeStateUpdateResponse, error)
	GetWorkflowState(context.Context, *GetWorkflowStateRequest) (*GetWorkflowStateResponse, error)
	SubmitTrigger(context.Context, *SubmitTriggerRequest) (*SubmitTriggerResponse, error)
	mustEmbedUnimplementedWorkflowServiceServer()
}

// UnimplementedWorkflowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkflowServiceServer struct{}

func (UnimplementedWorkflowServiceServer) ProposeStateUpdate(context.Context, *ProposeStateUpdateRequest) (*ProposeStateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeStateUpdate not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowState(context.Context, *GetWorkflowStateRequest) (*GetWorkflowStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowState not implemented")
}
func (UnimplementedWorkflowServiceServer) SubmitTrigger(context.Context, *SubmitTriggerRequest) (*SubmitTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTrigger not implemented")
}
func (UnimplementedWorkflowServiceServer) mustEmbedUnimplementedWorkflowServiceServer() {}
func (UnimplementedWorkflowServiceServer) testEmbeddedByValue()                         {}

// UnsafeWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServiceServer will
// result in compilation errors.
type UnsafeWorkflowServiceServer interface {
	mustEmbedUnimplementedWorkflowServiceServer()
}

func RegisterWorkflowServiceServer(s grpc.ServiceRegistrar, srv WorkflowServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkflowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkflowService_ServiceDesc, srv)
}

func _WorkflowService_ProposeStateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeStateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ProposeStateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_ProposeStateUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ProposeStateUpdate(ctx, req.(*ProposeStateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowState(ctx, req.(*GetWorkflowStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_SubmitTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).SubmitTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_SubmitTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).SubmitTrigger(ctx, req.(*SubmitTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowService_ServiceDesc is the grpc.ServiceDesc for WorkflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graft.proto.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeStateUpdate",
			Handler:    _WorkflowService_ProposeStateUpdate_Handler,
		},
		{
			MethodName: "GetWorkflowState",
			Handler:    _WorkflowService_GetWorkflowState_Handler,
		},
		{
			MethodName: "SubmitTrigger",
			Handler:    _WorkflowService_SubmitTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow.proto",
}
