// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: graft.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GraftNode_ProcessTrigger_FullMethodName = "/graft.GraftNode/ProcessTrigger"
	GraftNode_RequestJoin_FullMethodName    = "/graft.GraftNode/RequestJoin"
	GraftNode_ApplyCommand_FullMethodName   = "/graft.GraftNode/ApplyCommand"
	GraftNode_PublishLoad_FullMethodName    = "/graft.GraftNode/PublishLoad"
)

// GraftNodeClient is the client API for GraftNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraftNodeClient interface {
	ProcessTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
	RequestJoin(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	ApplyCommand(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	PublishLoad(ctx context.Context, in *LoadUpdate, opts ...grpc.CallOption) (*Ack, error)
}

type graftNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewGraftNodeClient(cc grpc.ClientConnInterface) GraftNodeClient {
	return &graftNodeClient{cc}
}

func (c *graftNodeClient) ProcessTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerResponse)
	err := c.cc.Invoke(ctx, GraftNode_ProcessTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graftNodeClient) RequestJoin(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, GraftNode_RequestJoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graftNodeClient) ApplyCommand(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyResponse)
	err := c.cc.Invoke(ctx, GraftNode_ApplyCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graftNodeClient) PublishLoad(ctx context.Context, in *LoadUpdate, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, GraftNode_PublishLoad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraftNodeServer is the server API for GraftNode service.
// All implementations must embed UnimplementedGraftNodeServer
// for forward compatibility.
type GraftNodeServer interface {
	ProcessTrigger(context.Context, *TriggerRequest) (*TriggerResponse, error)
	RequestJoin(context.Context, *JoinRequest) (*JoinResponse, error)
	ApplyCommand(context.Context, *ApplyRequest) (*ApplyResponse, error)
	PublishLoad(context.Context, *LoadUpdate) (*Ack, error)
	mustEmbedUnimplementedGraftNodeServer()
}

// UnimplementedGraftNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGraftNodeServer struct{}

func (UnimplementedGraftNodeServer) ProcessTrigger(context.Context, *TriggerRequest) (*TriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTrigger not implemented")
}
func (UnimplementedGraftNodeServer) RequestJoin(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestJoin not implemented")
}
func (UnimplementedGraftNodeServer) ApplyCommand(context.Context, *ApplyRequest) (*ApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCommand not implemented")
}
func (UnimplementedGraftNodeServer) PublishLoad(context.Context, *LoadUpdate) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLoad not implemented")
}
func (UnimplementedGraftNodeServer) mustEmbedUnimplementedGraftNodeServer() {}
func (UnimplementedGraftNodeServer) testEmbeddedByValue()                   {}

// UnsafeGraftNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraftNodeServer will
// result in compilation errors.
type UnsafeGraftNodeServer interface {
	mustEmbedUnimplementedGraftNodeServer()
}

func RegisterGraftNodeServer(s grpc.ServiceRegistrar, srv GraftNodeServer) {

	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GraftNode_ServiceDesc, srv)
}

func _GraftNode_ProcessTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraftNodeServer).ProcessTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraftNode_ProcessTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraftNodeServer).ProcessTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraftNode_RequestJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraftNodeServer).RequestJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraftNode_RequestJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraftNodeServer).RequestJoin(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraftNode_ApplyCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraftNodeServer).ApplyCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraftNode_ApplyCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraftNodeServer).ApplyCommand(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraftNode_PublishLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraftNodeServer).PublishLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraftNode_PublishLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraftNodeServer).PublishLoad(ctx, req.(*LoadUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// GraftNode_ServiceDesc is the grpc.ServiceDesc for GraftNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraftNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graft.GraftNode",
	HandlerType: (*GraftNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTrigger",
			Handler:    _GraftNode_ProcessTrigger_Handler,
		},
		{
			MethodName: "RequestJoin",
			Handler:    _GraftNode_RequestJoin_Handler,
		},
		{
			MethodName: "ApplyCommand",
			Handler:    _GraftNode_ApplyCommand_Handler,
		},
		{
			MethodName: "PublishLoad",
			Handler:    _GraftNode_PublishLoad_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graft.proto",
}
