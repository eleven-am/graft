// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: transport.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GraftTransport_SendMessage_FullMethodName      = "/transport.GraftTransport/SendMessage"
	GraftTransport_HealthCheck_FullMethodName      = "/transport.GraftTransport/HealthCheck"
	GraftTransport_GetLeaderAddress_FullMethodName = "/transport.GraftTransport/GetLeaderAddress"
)

// GraftTransportClient is the client API for GraftTransport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraftTransportClient interface {
	SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetLeaderAddress(ctx context.Context, in *LeaderAddressRequest, opts ...grpc.CallOption) (*LeaderAddressResponse, error)
}

type graftTransportClient struct {
	cc grpc.ClientConnInterface
}

func NewGraftTransportClient(cc grpc.ClientConnInterface) GraftTransportClient {
	return &graftTransportClient{cc}
}

func (c *graftTransportClient) SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, GraftTransport_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graftTransportClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, GraftTransport_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graftTransportClient) GetLeaderAddress(ctx context.Context, in *LeaderAddressRequest, opts ...grpc.CallOption) (*LeaderAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaderAddressResponse)
	err := c.cc.Invoke(ctx, GraftTransport_GetLeaderAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraftTransportServer is the server API for GraftTransport service.
// All implementations must embed UnimplementedGraftTransportServer
// for forward compatibility.
type GraftTransportServer interface {
	SendMessage(context.Context, *MessageRequest) (*MessageResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetLeaderAddress(context.Context, *LeaderAddressRequest) (*LeaderAddressResponse, error)
	mustEmbedUnimplementedGraftTransportServer()
}

// UnimplementedGraftTransportServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGraftTransportServer struct{}

func (UnimplementedGraftTransportServer) SendMessage(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedGraftTransportServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedGraftTransportServer) GetLeaderAddress(context.Context, *LeaderAddressRequest) (*LeaderAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderAddress not implemented")
}
func (UnimplementedGraftTransportServer) mustEmbedUnimplementedGraftTransportServer() {}
func (UnimplementedGraftTransportServer) testEmbeddedByValue()                        {}

// UnsafeGraftTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraftTransportServer will
// result in compilation errors.
type UnsafeGraftTransportServer interface {
	mustEmbedUnimplementedGraftTransportServer()
}

func RegisterGraftTransportServer(s grpc.ServiceRegistrar, srv GraftTransportServer) {
	// If the following call pancis, it indicates UnimplementedGraftTransportServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GraftTransport_ServiceDesc, srv)
}

func _GraftTransport_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraftTransportServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraftTransport_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraftTransportServer).SendMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraftTransport_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraftTransportServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraftTransport_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraftTransportServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraftTransport_GetLeaderAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraftTransportServer).GetLeaderAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraftTransport_GetLeaderAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraftTransportServer).GetLeaderAddress(ctx, req.(*LeaderAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GraftTransport_ServiceDesc is the grpc.ServiceDesc for GraftTransport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraftTransport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.GraftTransport",
	HandlerType: (*GraftTransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _GraftTransport_SendMessage_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _GraftTransport_HealthCheck_Handler,
		},
		{
			MethodName: "GetLeaderAddress",
			Handler:    _GraftTransport_GetLeaderAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport.proto",
}
