// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eleven-am/graft/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockEventManager is an autogenerated mock type for the EventManager type
type MockEventManager struct {
	mock.Mock
}

type MockEventManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventManager) EXPECT() *MockEventManager_Expecter {
	return &MockEventManager_Expecter{mock: &_m.Mock}
}

// OnNodeCompleted provides a mock function with given fields: handler
func (_m *MockEventManager) OnNodeCompleted(handler func(*domain.NodeCompletedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnNodeCompleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.NodeCompletedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnNodeCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNodeCompleted'
type MockEventManager_OnNodeCompleted_Call struct {
	*mock.Call
}

// OnNodeCompleted is a helper method to define mock.On call
//   - handler func(*domain.NodeCompletedEvent)
func (_e *MockEventManager_Expecter) OnNodeCompleted(handler interface{}) *MockEventManager_OnNodeCompleted_Call {
	return &MockEventManager_OnNodeCompleted_Call{Call: _e.mock.On("OnNodeCompleted", handler)}
}

func (_c *MockEventManager_OnNodeCompleted_Call) Run(run func(handler func(*domain.NodeCompletedEvent))) *MockEventManager_OnNodeCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.NodeCompletedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnNodeCompleted_Call) Return(_a0 error) *MockEventManager_OnNodeCompleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnNodeCompleted_Call) RunAndReturn(run func(func(*domain.NodeCompletedEvent)) error) *MockEventManager_OnNodeCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// OnNodeError provides a mock function with given fields: handler
func (_m *MockEventManager) OnNodeError(handler func(*domain.NodeErrorEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnNodeError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.NodeErrorEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnNodeError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNodeError'
type MockEventManager_OnNodeError_Call struct {
	*mock.Call
}

// OnNodeError is a helper method to define mock.On call
//   - handler func(*domain.NodeErrorEvent)
func (_e *MockEventManager_Expecter) OnNodeError(handler interface{}) *MockEventManager_OnNodeError_Call {
	return &MockEventManager_OnNodeError_Call{Call: _e.mock.On("OnNodeError", handler)}
}

func (_c *MockEventManager_OnNodeError_Call) Run(run func(handler func(*domain.NodeErrorEvent))) *MockEventManager_OnNodeError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.NodeErrorEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnNodeError_Call) Return(_a0 error) *MockEventManager_OnNodeError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnNodeError_Call) RunAndReturn(run func(func(*domain.NodeErrorEvent)) error) *MockEventManager_OnNodeError_Call {
	_c.Call.Return(run)
	return _c
}

// OnNodeStarted provides a mock function with given fields: handler
func (_m *MockEventManager) OnNodeStarted(handler func(*domain.NodeStartedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnNodeStarted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.NodeStartedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnNodeStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNodeStarted'
type MockEventManager_OnNodeStarted_Call struct {
	*mock.Call
}

// OnNodeStarted is a helper method to define mock.On call
//   - handler func(*domain.NodeStartedEvent)
func (_e *MockEventManager_Expecter) OnNodeStarted(handler interface{}) *MockEventManager_OnNodeStarted_Call {
	return &MockEventManager_OnNodeStarted_Call{Call: _e.mock.On("OnNodeStarted", handler)}
}

func (_c *MockEventManager_OnNodeStarted_Call) Run(run func(handler func(*domain.NodeStartedEvent))) *MockEventManager_OnNodeStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.NodeStartedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnNodeStarted_Call) Return(_a0 error) *MockEventManager_OnNodeStarted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnNodeStarted_Call) RunAndReturn(run func(func(*domain.NodeStartedEvent)) error) *MockEventManager_OnNodeStarted_Call {
	_c.Call.Return(run)
	return _c
}

// OnWorkflowCompleted provides a mock function with given fields: handler
func (_m *MockEventManager) OnWorkflowCompleted(handler func(*domain.WorkflowCompletedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnWorkflowCompleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.WorkflowCompletedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnWorkflowCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWorkflowCompleted'
type MockEventManager_OnWorkflowCompleted_Call struct {
	*mock.Call
}

// OnWorkflowCompleted is a helper method to define mock.On call
//   - handler func(*domain.WorkflowCompletedEvent)
func (_e *MockEventManager_Expecter) OnWorkflowCompleted(handler interface{}) *MockEventManager_OnWorkflowCompleted_Call {
	return &MockEventManager_OnWorkflowCompleted_Call{Call: _e.mock.On("OnWorkflowCompleted", handler)}
}

func (_c *MockEventManager_OnWorkflowCompleted_Call) Run(run func(handler func(*domain.WorkflowCompletedEvent))) *MockEventManager_OnWorkflowCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.WorkflowCompletedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnWorkflowCompleted_Call) Return(_a0 error) *MockEventManager_OnWorkflowCompleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnWorkflowCompleted_Call) RunAndReturn(run func(func(*domain.WorkflowCompletedEvent)) error) *MockEventManager_OnWorkflowCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// OnWorkflowFailed provides a mock function with given fields: handler
func (_m *MockEventManager) OnWorkflowFailed(handler func(*domain.WorkflowErrorEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnWorkflowFailed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.WorkflowErrorEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnWorkflowFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWorkflowFailed'
type MockEventManager_OnWorkflowFailed_Call struct {
	*mock.Call
}

// OnWorkflowFailed is a helper method to define mock.On call
//   - handler func(*domain.WorkflowErrorEvent)
func (_e *MockEventManager_Expecter) OnWorkflowFailed(handler interface{}) *MockEventManager_OnWorkflowFailed_Call {
	return &MockEventManager_OnWorkflowFailed_Call{Call: _e.mock.On("OnWorkflowFailed", handler)}
}

func (_c *MockEventManager_OnWorkflowFailed_Call) Run(run func(handler func(*domain.WorkflowErrorEvent))) *MockEventManager_OnWorkflowFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.WorkflowErrorEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnWorkflowFailed_Call) Return(_a0 error) *MockEventManager_OnWorkflowFailed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnWorkflowFailed_Call) RunAndReturn(run func(func(*domain.WorkflowErrorEvent)) error) *MockEventManager_OnWorkflowFailed_Call {
	_c.Call.Return(run)
	return _c
}

// OnWorkflowPaused provides a mock function with given fields: handler
func (_m *MockEventManager) OnWorkflowPaused(handler func(*domain.WorkflowPausedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnWorkflowPaused")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.WorkflowPausedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnWorkflowPaused_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWorkflowPaused'
type MockEventManager_OnWorkflowPaused_Call struct {
	*mock.Call
}

// OnWorkflowPaused is a helper method to define mock.On call
//   - handler func(*domain.WorkflowPausedEvent)
func (_e *MockEventManager_Expecter) OnWorkflowPaused(handler interface{}) *MockEventManager_OnWorkflowPaused_Call {
	return &MockEventManager_OnWorkflowPaused_Call{Call: _e.mock.On("OnWorkflowPaused", handler)}
}

func (_c *MockEventManager_OnWorkflowPaused_Call) Run(run func(handler func(*domain.WorkflowPausedEvent))) *MockEventManager_OnWorkflowPaused_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.WorkflowPausedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnWorkflowPaused_Call) Return(_a0 error) *MockEventManager_OnWorkflowPaused_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnWorkflowPaused_Call) RunAndReturn(run func(func(*domain.WorkflowPausedEvent)) error) *MockEventManager_OnWorkflowPaused_Call {
	_c.Call.Return(run)
	return _c
}

// OnWorkflowResumed provides a mock function with given fields: handler
func (_m *MockEventManager) OnWorkflowResumed(handler func(*domain.WorkflowResumedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnWorkflowResumed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.WorkflowResumedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnWorkflowResumed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWorkflowResumed'
type MockEventManager_OnWorkflowResumed_Call struct {
	*mock.Call
}

// OnWorkflowResumed is a helper method to define mock.On call
//   - handler func(*domain.WorkflowResumedEvent)
func (_e *MockEventManager_Expecter) OnWorkflowResumed(handler interface{}) *MockEventManager_OnWorkflowResumed_Call {
	return &MockEventManager_OnWorkflowResumed_Call{Call: _e.mock.On("OnWorkflowResumed", handler)}
}

func (_c *MockEventManager_OnWorkflowResumed_Call) Run(run func(handler func(*domain.WorkflowResumedEvent))) *MockEventManager_OnWorkflowResumed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.WorkflowResumedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnWorkflowResumed_Call) Return(_a0 error) *MockEventManager_OnWorkflowResumed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnWorkflowResumed_Call) RunAndReturn(run func(func(*domain.WorkflowResumedEvent)) error) *MockEventManager_OnWorkflowResumed_Call {
	_c.Call.Return(run)
	return _c
}

// OnWorkflowStarted provides a mock function with given fields: handler
func (_m *MockEventManager) OnWorkflowStarted(handler func(*domain.WorkflowStartedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnWorkflowStarted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.WorkflowStartedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnWorkflowStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWorkflowStarted'
type MockEventManager_OnWorkflowStarted_Call struct {
	*mock.Call
}

// OnWorkflowStarted is a helper method to define mock.On call
//   - handler func(*domain.WorkflowStartedEvent)
func (_e *MockEventManager_Expecter) OnWorkflowStarted(handler interface{}) *MockEventManager_OnWorkflowStarted_Call {
	return &MockEventManager_OnWorkflowStarted_Call{Call: _e.mock.On("OnWorkflowStarted", handler)}
}

func (_c *MockEventManager_OnWorkflowStarted_Call) Run(run func(handler func(*domain.WorkflowStartedEvent))) *MockEventManager_OnWorkflowStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.WorkflowStartedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnWorkflowStarted_Call) Return(_a0 error) *MockEventManager_OnWorkflowStarted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnWorkflowStarted_Call) RunAndReturn(run func(func(*domain.WorkflowStartedEvent)) error) *MockEventManager_OnWorkflowStarted_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockEventManager) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEventManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventManager_Expecter) Start(ctx interface{}) *MockEventManager_Start_Call {
	return &MockEventManager_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockEventManager_Start_Call) Run(run func(ctx context.Context)) *MockEventManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEventManager_Start_Call) Return(_a0 error) *MockEventManager_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_Start_Call) RunAndReturn(run func(context.Context) error) *MockEventManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockEventManager) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockEventManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockEventManager_Expecter) Stop() *MockEventManager_Stop_Call {
	return &MockEventManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockEventManager_Stop_Call) Run(run func()) *MockEventManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventManager_Stop_Call) Return(_a0 error) *MockEventManager_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_Stop_Call) RunAndReturn(run func() error) *MockEventManager_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: pattern, handler
func (_m *MockEventManager) Subscribe(pattern string, handler func(string, interface{})) error {
	ret := _m.Called(pattern, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(string, interface{})) error); ok {
		r0 = rf(pattern, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockEventManager_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - pattern string
//   - handler func(string , interface{})
func (_e *MockEventManager_Expecter) Subscribe(pattern interface{}, handler interface{}) *MockEventManager_Subscribe_Call {
	return &MockEventManager_Subscribe_Call{Call: _e.mock.On("Subscribe", pattern, handler)}
}

func (_c *MockEventManager_Subscribe_Call) Run(run func(pattern string, handler func(string, interface{}))) *MockEventManager_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(string, interface{})))
	})
	return _c
}

func (_c *MockEventManager_Subscribe_Call) Return(_a0 error) *MockEventManager_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_Subscribe_Call) RunAndReturn(run func(string, func(string, interface{})) error) *MockEventManager_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: pattern
func (_m *MockEventManager) Unsubscribe(pattern string) error {
	ret := _m.Called(pattern)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pattern)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockEventManager_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - pattern string
func (_e *MockEventManager_Expecter) Unsubscribe(pattern interface{}) *MockEventManager_Unsubscribe_Call {
	return &MockEventManager_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", pattern)}
}

func (_c *MockEventManager_Unsubscribe_Call) Run(run func(pattern string)) *MockEventManager_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEventManager_Unsubscribe_Call) Return(_a0 error) *MockEventManager_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_Unsubscribe_Call) RunAndReturn(run func(string) error) *MockEventManager_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventManager creates a new instance of MockEventManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventManager {
	mock := &MockEventManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
