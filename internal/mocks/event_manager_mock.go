// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eleven-am/graft/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockEventManager is an autogenerated mock type for the EventManager type
type MockEventManager struct {
	mock.Mock
}

type MockEventManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventManager) EXPECT() *MockEventManager_Expecter {
	return &MockEventManager_Expecter{mock: &_m.Mock}
}

// Broadcast provides a mock function with given fields: event
func (_m *MockEventManager) Broadcast(event domain.Event) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Broadcast")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type MockEventManager_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - event domain.Event
func (_e *MockEventManager_Expecter) Broadcast(event interface{}) *MockEventManager_Broadcast_Call {
	return &MockEventManager_Broadcast_Call{Call: _e.mock.On("Broadcast", event)}
}

func (_c *MockEventManager_Broadcast_Call) Run(run func(event domain.Event)) *MockEventManager_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Event))
	})
	return _c
}

func (_c *MockEventManager_Broadcast_Call) Return(_a0 error) *MockEventManager_Broadcast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_Broadcast_Call) RunAndReturn(run func(domain.Event) error) *MockEventManager_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

// BroadcastCommand provides a mock function with given fields: ctx, devCmd
func (_m *MockEventManager) BroadcastCommand(ctx context.Context, devCmd *domain.DevCommand) error {
	ret := _m.Called(ctx, devCmd)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DevCommand) error); ok {
		r0 = rf(ctx, devCmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_BroadcastCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastCommand'
type MockEventManager_BroadcastCommand_Call struct {
	*mock.Call
}

// BroadcastCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - devCmd *domain.DevCommand
func (_e *MockEventManager_Expecter) BroadcastCommand(ctx interface{}, devCmd interface{}) *MockEventManager_BroadcastCommand_Call {
	return &MockEventManager_BroadcastCommand_Call{Call: _e.mock.On("BroadcastCommand", ctx, devCmd)}
}

func (_c *MockEventManager_BroadcastCommand_Call) Run(run func(ctx context.Context, devCmd *domain.DevCommand)) *MockEventManager_BroadcastCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.DevCommand))
	})
	return _c
}

func (_c *MockEventManager_BroadcastCommand_Call) Return(_a0 error) *MockEventManager_BroadcastCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_BroadcastCommand_Call) RunAndReturn(run func(context.Context, *domain.DevCommand) error) *MockEventManager_BroadcastCommand_Call {
	_c.Call.Return(run)
	return _c
}

// OnLeaderChanged provides a mock function with given fields: handler
func (_m *MockEventManager) OnLeaderChanged(handler func(*domain.LeaderChangedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnLeaderChanged")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.LeaderChangedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnLeaderChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnLeaderChanged'
type MockEventManager_OnLeaderChanged_Call struct {
	*mock.Call
}

// OnLeaderChanged is a helper method to define mock.On call
//   - handler func(*domain.LeaderChangedEvent)
func (_e *MockEventManager_Expecter) OnLeaderChanged(handler interface{}) *MockEventManager_OnLeaderChanged_Call {
	return &MockEventManager_OnLeaderChanged_Call{Call: _e.mock.On("OnLeaderChanged", handler)}
}

func (_c *MockEventManager_OnLeaderChanged_Call) Run(run func(handler func(*domain.LeaderChangedEvent))) *MockEventManager_OnLeaderChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.LeaderChangedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnLeaderChanged_Call) Return(_a0 error) *MockEventManager_OnLeaderChanged_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnLeaderChanged_Call) RunAndReturn(run func(func(*domain.LeaderChangedEvent)) error) *MockEventManager_OnLeaderChanged_Call {
	_c.Call.Return(run)
	return _c
}

// OnNodeCompleted provides a mock function with given fields: handler
func (_m *MockEventManager) OnNodeCompleted(handler func(*domain.NodeCompletedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnNodeCompleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.NodeCompletedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnNodeCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNodeCompleted'
type MockEventManager_OnNodeCompleted_Call struct {
	*mock.Call
}

// OnNodeCompleted is a helper method to define mock.On call
//   - handler func(*domain.NodeCompletedEvent)
func (_e *MockEventManager_Expecter) OnNodeCompleted(handler interface{}) *MockEventManager_OnNodeCompleted_Call {
	return &MockEventManager_OnNodeCompleted_Call{Call: _e.mock.On("OnNodeCompleted", handler)}
}

func (_c *MockEventManager_OnNodeCompleted_Call) Run(run func(handler func(*domain.NodeCompletedEvent))) *MockEventManager_OnNodeCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.NodeCompletedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnNodeCompleted_Call) Return(_a0 error) *MockEventManager_OnNodeCompleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnNodeCompleted_Call) RunAndReturn(run func(func(*domain.NodeCompletedEvent)) error) *MockEventManager_OnNodeCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// OnNodeError provides a mock function with given fields: handler
func (_m *MockEventManager) OnNodeError(handler func(*domain.NodeErrorEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnNodeError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.NodeErrorEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnNodeError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNodeError'
type MockEventManager_OnNodeError_Call struct {
	*mock.Call
}

// OnNodeError is a helper method to define mock.On call
//   - handler func(*domain.NodeErrorEvent)
func (_e *MockEventManager_Expecter) OnNodeError(handler interface{}) *MockEventManager_OnNodeError_Call {
	return &MockEventManager_OnNodeError_Call{Call: _e.mock.On("OnNodeError", handler)}
}

func (_c *MockEventManager_OnNodeError_Call) Run(run func(handler func(*domain.NodeErrorEvent))) *MockEventManager_OnNodeError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.NodeErrorEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnNodeError_Call) Return(_a0 error) *MockEventManager_OnNodeError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnNodeError_Call) RunAndReturn(run func(func(*domain.NodeErrorEvent)) error) *MockEventManager_OnNodeError_Call {
	_c.Call.Return(run)
	return _c
}

// OnNodeJoined provides a mock function with given fields: handler
func (_m *MockEventManager) OnNodeJoined(handler func(*domain.NodeJoinedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnNodeJoined")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.NodeJoinedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnNodeJoined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNodeJoined'
type MockEventManager_OnNodeJoined_Call struct {
	*mock.Call
}

// OnNodeJoined is a helper method to define mock.On call
//   - handler func(*domain.NodeJoinedEvent)
func (_e *MockEventManager_Expecter) OnNodeJoined(handler interface{}) *MockEventManager_OnNodeJoined_Call {
	return &MockEventManager_OnNodeJoined_Call{Call: _e.mock.On("OnNodeJoined", handler)}
}

func (_c *MockEventManager_OnNodeJoined_Call) Run(run func(handler func(*domain.NodeJoinedEvent))) *MockEventManager_OnNodeJoined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.NodeJoinedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnNodeJoined_Call) Return(_a0 error) *MockEventManager_OnNodeJoined_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnNodeJoined_Call) RunAndReturn(run func(func(*domain.NodeJoinedEvent)) error) *MockEventManager_OnNodeJoined_Call {
	_c.Call.Return(run)
	return _c
}

// OnNodeLeft provides a mock function with given fields: handler
func (_m *MockEventManager) OnNodeLeft(handler func(*domain.NodeLeftEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnNodeLeft")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.NodeLeftEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnNodeLeft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNodeLeft'
type MockEventManager_OnNodeLeft_Call struct {
	*mock.Call
}

// OnNodeLeft is a helper method to define mock.On call
//   - handler func(*domain.NodeLeftEvent)
func (_e *MockEventManager_Expecter) OnNodeLeft(handler interface{}) *MockEventManager_OnNodeLeft_Call {
	return &MockEventManager_OnNodeLeft_Call{Call: _e.mock.On("OnNodeLeft", handler)}
}

func (_c *MockEventManager_OnNodeLeft_Call) Run(run func(handler func(*domain.NodeLeftEvent))) *MockEventManager_OnNodeLeft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.NodeLeftEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnNodeLeft_Call) Return(_a0 error) *MockEventManager_OnNodeLeft_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnNodeLeft_Call) RunAndReturn(run func(func(*domain.NodeLeftEvent)) error) *MockEventManager_OnNodeLeft_Call {
	_c.Call.Return(run)
	return _c
}

// OnNodeStarted provides a mock function with given fields: handler
func (_m *MockEventManager) OnNodeStarted(handler func(*domain.NodeStartedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnNodeStarted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.NodeStartedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnNodeStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNodeStarted'
type MockEventManager_OnNodeStarted_Call struct {
	*mock.Call
}

// OnNodeStarted is a helper method to define mock.On call
//   - handler func(*domain.NodeStartedEvent)
func (_e *MockEventManager_Expecter) OnNodeStarted(handler interface{}) *MockEventManager_OnNodeStarted_Call {
	return &MockEventManager_OnNodeStarted_Call{Call: _e.mock.On("OnNodeStarted", handler)}
}

func (_c *MockEventManager_OnNodeStarted_Call) Run(run func(handler func(*domain.NodeStartedEvent))) *MockEventManager_OnNodeStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.NodeStartedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnNodeStarted_Call) Return(_a0 error) *MockEventManager_OnNodeStarted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnNodeStarted_Call) RunAndReturn(run func(func(*domain.NodeStartedEvent)) error) *MockEventManager_OnNodeStarted_Call {
	_c.Call.Return(run)
	return _c
}

// OnWorkflowCompleted provides a mock function with given fields: handler
func (_m *MockEventManager) OnWorkflowCompleted(handler func(*domain.WorkflowCompletedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnWorkflowCompleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.WorkflowCompletedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnWorkflowCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWorkflowCompleted'
type MockEventManager_OnWorkflowCompleted_Call struct {
	*mock.Call
}

// OnWorkflowCompleted is a helper method to define mock.On call
//   - handler func(*domain.WorkflowCompletedEvent)
func (_e *MockEventManager_Expecter) OnWorkflowCompleted(handler interface{}) *MockEventManager_OnWorkflowCompleted_Call {
	return &MockEventManager_OnWorkflowCompleted_Call{Call: _e.mock.On("OnWorkflowCompleted", handler)}
}

func (_c *MockEventManager_OnWorkflowCompleted_Call) Run(run func(handler func(*domain.WorkflowCompletedEvent))) *MockEventManager_OnWorkflowCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.WorkflowCompletedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnWorkflowCompleted_Call) Return(_a0 error) *MockEventManager_OnWorkflowCompleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnWorkflowCompleted_Call) RunAndReturn(run func(func(*domain.WorkflowCompletedEvent)) error) *MockEventManager_OnWorkflowCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// OnWorkflowFailed provides a mock function with given fields: handler
func (_m *MockEventManager) OnWorkflowFailed(handler func(*domain.WorkflowErrorEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnWorkflowFailed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.WorkflowErrorEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnWorkflowFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWorkflowFailed'
type MockEventManager_OnWorkflowFailed_Call struct {
	*mock.Call
}

// OnWorkflowFailed is a helper method to define mock.On call
//   - handler func(*domain.WorkflowErrorEvent)
func (_e *MockEventManager_Expecter) OnWorkflowFailed(handler interface{}) *MockEventManager_OnWorkflowFailed_Call {
	return &MockEventManager_OnWorkflowFailed_Call{Call: _e.mock.On("OnWorkflowFailed", handler)}
}

func (_c *MockEventManager_OnWorkflowFailed_Call) Run(run func(handler func(*domain.WorkflowErrorEvent))) *MockEventManager_OnWorkflowFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.WorkflowErrorEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnWorkflowFailed_Call) Return(_a0 error) *MockEventManager_OnWorkflowFailed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnWorkflowFailed_Call) RunAndReturn(run func(func(*domain.WorkflowErrorEvent)) error) *MockEventManager_OnWorkflowFailed_Call {
	_c.Call.Return(run)
	return _c
}

// OnWorkflowPaused provides a mock function with given fields: handler
func (_m *MockEventManager) OnWorkflowPaused(handler func(*domain.WorkflowPausedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnWorkflowPaused")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.WorkflowPausedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnWorkflowPaused_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWorkflowPaused'
type MockEventManager_OnWorkflowPaused_Call struct {
	*mock.Call
}

// OnWorkflowPaused is a helper method to define mock.On call
//   - handler func(*domain.WorkflowPausedEvent)
func (_e *MockEventManager_Expecter) OnWorkflowPaused(handler interface{}) *MockEventManager_OnWorkflowPaused_Call {
	return &MockEventManager_OnWorkflowPaused_Call{Call: _e.mock.On("OnWorkflowPaused", handler)}
}

func (_c *MockEventManager_OnWorkflowPaused_Call) Run(run func(handler func(*domain.WorkflowPausedEvent))) *MockEventManager_OnWorkflowPaused_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.WorkflowPausedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnWorkflowPaused_Call) Return(_a0 error) *MockEventManager_OnWorkflowPaused_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnWorkflowPaused_Call) RunAndReturn(run func(func(*domain.WorkflowPausedEvent)) error) *MockEventManager_OnWorkflowPaused_Call {
	_c.Call.Return(run)
	return _c
}

// OnWorkflowResumed provides a mock function with given fields: handler
func (_m *MockEventManager) OnWorkflowResumed(handler func(*domain.WorkflowResumedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnWorkflowResumed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.WorkflowResumedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnWorkflowResumed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWorkflowResumed'
type MockEventManager_OnWorkflowResumed_Call struct {
	*mock.Call
}

// OnWorkflowResumed is a helper method to define mock.On call
//   - handler func(*domain.WorkflowResumedEvent)
func (_e *MockEventManager_Expecter) OnWorkflowResumed(handler interface{}) *MockEventManager_OnWorkflowResumed_Call {
	return &MockEventManager_OnWorkflowResumed_Call{Call: _e.mock.On("OnWorkflowResumed", handler)}
}

func (_c *MockEventManager_OnWorkflowResumed_Call) Run(run func(handler func(*domain.WorkflowResumedEvent))) *MockEventManager_OnWorkflowResumed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.WorkflowResumedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnWorkflowResumed_Call) Return(_a0 error) *MockEventManager_OnWorkflowResumed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnWorkflowResumed_Call) RunAndReturn(run func(func(*domain.WorkflowResumedEvent)) error) *MockEventManager_OnWorkflowResumed_Call {
	_c.Call.Return(run)
	return _c
}

// OnWorkflowStarted provides a mock function with given fields: handler
func (_m *MockEventManager) OnWorkflowStarted(handler func(*domain.WorkflowStartedEvent)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnWorkflowStarted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*domain.WorkflowStartedEvent)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_OnWorkflowStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnWorkflowStarted'
type MockEventManager_OnWorkflowStarted_Call struct {
	*mock.Call
}

// OnWorkflowStarted is a helper method to define mock.On call
//   - handler func(*domain.WorkflowStartedEvent)
func (_e *MockEventManager_Expecter) OnWorkflowStarted(handler interface{}) *MockEventManager_OnWorkflowStarted_Call {
	return &MockEventManager_OnWorkflowStarted_Call{Call: _e.mock.On("OnWorkflowStarted", handler)}
}

func (_c *MockEventManager_OnWorkflowStarted_Call) Run(run func(handler func(*domain.WorkflowStartedEvent))) *MockEventManager_OnWorkflowStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*domain.WorkflowStartedEvent)))
	})
	return _c
}

func (_c *MockEventManager_OnWorkflowStarted_Call) Return(_a0 error) *MockEventManager_OnWorkflowStarted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_OnWorkflowStarted_Call) RunAndReturn(run func(func(*domain.WorkflowStartedEvent)) error) *MockEventManager_OnWorkflowStarted_Call {
	_c.Call.Return(run)
	return _c
}

// PublishStorageEvents provides a mock function with given fields: events
func (_m *MockEventManager) PublishStorageEvents(events []domain.Event) error {
	ret := _m.Called(events)

	if len(ret) == 0 {
		panic("no return value specified for PublishStorageEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]domain.Event) error); ok {
		r0 = rf(events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_PublishStorageEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishStorageEvents'
type MockEventManager_PublishStorageEvents_Call struct {
	*mock.Call
}

// PublishStorageEvents is a helper method to define mock.On call
//   - events []domain.Event
func (_e *MockEventManager_Expecter) PublishStorageEvents(events interface{}) *MockEventManager_PublishStorageEvents_Call {
	return &MockEventManager_PublishStorageEvents_Call{Call: _e.mock.On("PublishStorageEvents", events)}
}

func (_c *MockEventManager_PublishStorageEvents_Call) Run(run func(events []domain.Event)) *MockEventManager_PublishStorageEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]domain.Event))
	})
	return _c
}

func (_c *MockEventManager_PublishStorageEvents_Call) Return(_a0 error) *MockEventManager_PublishStorageEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_PublishStorageEvents_Call) RunAndReturn(run func([]domain.Event) error) *MockEventManager_PublishStorageEvents_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCommandHandler provides a mock function with given fields: cmdName, handler
func (_m *MockEventManager) RegisterCommandHandler(cmdName string, handler domain.CommandHandler) error {
	ret := _m.Called(cmdName, handler)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCommandHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.CommandHandler) error); ok {
		r0 = rf(cmdName, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_RegisterCommandHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCommandHandler'
type MockEventManager_RegisterCommandHandler_Call struct {
	*mock.Call
}

// RegisterCommandHandler is a helper method to define mock.On call
//   - cmdName string
//   - handler domain.CommandHandler
func (_e *MockEventManager_Expecter) RegisterCommandHandler(cmdName interface{}, handler interface{}) *MockEventManager_RegisterCommandHandler_Call {
	return &MockEventManager_RegisterCommandHandler_Call{Call: _e.mock.On("RegisterCommandHandler", cmdName, handler)}
}

func (_c *MockEventManager_RegisterCommandHandler_Call) Run(run func(cmdName string, handler domain.CommandHandler)) *MockEventManager_RegisterCommandHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.CommandHandler))
	})
	return _c
}

func (_c *MockEventManager_RegisterCommandHandler_Call) Return(_a0 error) *MockEventManager_RegisterCommandHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_RegisterCommandHandler_Call) RunAndReturn(run func(string, domain.CommandHandler) error) *MockEventManager_RegisterCommandHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockEventManager) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEventManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventManager_Expecter) Start(ctx interface{}) *MockEventManager_Start_Call {
	return &MockEventManager_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockEventManager_Start_Call) Run(run func(ctx context.Context)) *MockEventManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEventManager_Start_Call) Return(_a0 error) *MockEventManager_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_Start_Call) RunAndReturn(run func(context.Context) error) *MockEventManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockEventManager) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockEventManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockEventManager_Expecter) Stop() *MockEventManager_Stop_Call {
	return &MockEventManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockEventManager_Stop_Call) Run(run func()) *MockEventManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventManager_Stop_Call) Return(_a0 error) *MockEventManager_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventManager_Stop_Call) RunAndReturn(run func() error) *MockEventManager_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToChannel provides a mock function with given fields: prefix
func (_m *MockEventManager) SubscribeToChannel(prefix string) (<-chan domain.Event, func(), error) {
	ret := _m.Called(prefix)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToChannel")
	}

	var r0 <-chan domain.Event
	var r1 func()
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (<-chan domain.Event, func(), error)); ok {
		return rf(prefix)
	}
	if rf, ok := ret.Get(0).(func(string) <-chan domain.Event); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(string) func()); ok {
		r1 = rf(prefix)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(prefix)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockEventManager_SubscribeToChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToChannel'
type MockEventManager_SubscribeToChannel_Call struct {
	*mock.Call
}

// SubscribeToChannel is a helper method to define mock.On call
//   - prefix string
func (_e *MockEventManager_Expecter) SubscribeToChannel(prefix interface{}) *MockEventManager_SubscribeToChannel_Call {
	return &MockEventManager_SubscribeToChannel_Call{Call: _e.mock.On("SubscribeToChannel", prefix)}
}

func (_c *MockEventManager_SubscribeToChannel_Call) Run(run func(prefix string)) *MockEventManager_SubscribeToChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEventManager_SubscribeToChannel_Call) Return(_a0 <-chan domain.Event, _a1 func(), _a2 error) *MockEventManager_SubscribeToChannel_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockEventManager_SubscribeToChannel_Call) RunAndReturn(run func(string) (<-chan domain.Event, func(), error)) *MockEventManager_SubscribeToChannel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventManager creates a new instance of MockEventManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventManager {
	mock := &MockEventManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
