// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	io "io"

	raft "github.com/hashicorp/raft"
	mock "github.com/stretchr/testify/mock"
)

// MockFSM is an autogenerated mock type for the FSM type
type MockFSM struct {
	mock.Mock
}

type MockFSM_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFSM) EXPECT() *MockFSM_Expecter {
	return &MockFSM_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: _a0
func (_m *MockFSM) Apply(_a0 *raft.Log) interface{} {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*raft.Log) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockFSM_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockFSM_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - _a0 *raft.Log
func (_e *MockFSM_Expecter) Apply(_a0 interface{}) *MockFSM_Apply_Call {
	return &MockFSM_Apply_Call{Call: _e.mock.On("Apply", _a0)}
}

func (_c *MockFSM_Apply_Call) Run(run func(_a0 *raft.Log)) *MockFSM_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*raft.Log))
	})
	return _c
}

func (_c *MockFSM_Apply_Call) Return(_a0 interface{}) *MockFSM_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFSM_Apply_Call) RunAndReturn(run func(*raft.Log) interface{}) *MockFSM_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function with given fields: snapshot
func (_m *MockFSM) Restore(snapshot io.ReadCloser) error {
	ret := _m.Called(snapshot)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.ReadCloser) error); ok {
		r0 = rf(snapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFSM_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type MockFSM_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - snapshot io.ReadCloser
func (_e *MockFSM_Expecter) Restore(snapshot interface{}) *MockFSM_Restore_Call {
	return &MockFSM_Restore_Call{Call: _e.mock.On("Restore", snapshot)}
}

func (_c *MockFSM_Restore_Call) Run(run func(snapshot io.ReadCloser)) *MockFSM_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.ReadCloser))
	})
	return _c
}

func (_c *MockFSM_Restore_Call) Return(_a0 error) *MockFSM_Restore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFSM_Restore_Call) RunAndReturn(run func(io.ReadCloser) error) *MockFSM_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Snapshot provides a mock function with no fields
func (_m *MockFSM) Snapshot() (raft.FSMSnapshot, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Snapshot")
	}

	var r0 raft.FSMSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func() (raft.FSMSnapshot, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() raft.FSMSnapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.FSMSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFSM_Snapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snapshot'
type MockFSM_Snapshot_Call struct {
	*mock.Call
}

// Snapshot is a helper method to define mock.On call
func (_e *MockFSM_Expecter) Snapshot() *MockFSM_Snapshot_Call {
	return &MockFSM_Snapshot_Call{Call: _e.mock.On("Snapshot")}
}

func (_c *MockFSM_Snapshot_Call) Run(run func()) *MockFSM_Snapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFSM_Snapshot_Call) Return(_a0 raft.FSMSnapshot, _a1 error) *MockFSM_Snapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFSM_Snapshot_Call) RunAndReturn(run func() (raft.FSMSnapshot, error)) *MockFSM_Snapshot_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFSM creates a new instance of MockFSM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFSM(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFSM {
	mock := &MockFSM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
