// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	raft "github.com/hashicorp/raft"
	mock "github.com/stretchr/testify/mock"
)

// MockLogStore is an autogenerated mock type for the LogStore type
type MockLogStore struct {
	mock.Mock
}

type MockLogStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogStore) EXPECT() *MockLogStore_Expecter {
	return &MockLogStore_Expecter{mock: &_m.Mock}
}

// DeleteRange provides a mock function with given fields: min, max
func (_m *MockLogStore) DeleteRange(min uint64, max uint64) error {
	ret := _m.Called(min, max)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(min, max)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogStore_DeleteRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRange'
type MockLogStore_DeleteRange_Call struct {
	*mock.Call
}

// DeleteRange is a helper method to define mock.On call
//   - min uint64
//   - max uint64
func (_e *MockLogStore_Expecter) DeleteRange(min interface{}, max interface{}) *MockLogStore_DeleteRange_Call {
	return &MockLogStore_DeleteRange_Call{Call: _e.mock.On("DeleteRange", min, max)}
}

func (_c *MockLogStore_DeleteRange_Call) Run(run func(min uint64, max uint64)) *MockLogStore_DeleteRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *MockLogStore_DeleteRange_Call) Return(_a0 error) *MockLogStore_DeleteRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogStore_DeleteRange_Call) RunAndReturn(run func(uint64, uint64) error) *MockLogStore_DeleteRange_Call {
	_c.Call.Return(run)
	return _c
}

// FirstIndex provides a mock function with no fields
func (_m *MockLogStore) FirstIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FirstIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogStore_FirstIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstIndex'
type MockLogStore_FirstIndex_Call struct {
	*mock.Call
}

// FirstIndex is a helper method to define mock.On call
func (_e *MockLogStore_Expecter) FirstIndex() *MockLogStore_FirstIndex_Call {
	return &MockLogStore_FirstIndex_Call{Call: _e.mock.On("FirstIndex")}
}

func (_c *MockLogStore_FirstIndex_Call) Run(run func()) *MockLogStore_FirstIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogStore_FirstIndex_Call) Return(_a0 uint64, _a1 error) *MockLogStore_FirstIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogStore_FirstIndex_Call) RunAndReturn(run func() (uint64, error)) *MockLogStore_FirstIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetLog provides a mock function with given fields: index, log
func (_m *MockLogStore) GetLog(index uint64, log *raft.Log) error {
	ret := _m.Called(index, log)

	if len(ret) == 0 {
		panic("no return value specified for GetLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *raft.Log) error); ok {
		r0 = rf(index, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogStore_GetLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLog'
type MockLogStore_GetLog_Call struct {
	*mock.Call
}

// GetLog is a helper method to define mock.On call
//   - index uint64
//   - log *raft.Log
func (_e *MockLogStore_Expecter) GetLog(index interface{}, log interface{}) *MockLogStore_GetLog_Call {
	return &MockLogStore_GetLog_Call{Call: _e.mock.On("GetLog", index, log)}
}

func (_c *MockLogStore_GetLog_Call) Run(run func(index uint64, log *raft.Log)) *MockLogStore_GetLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*raft.Log))
	})
	return _c
}

func (_c *MockLogStore_GetLog_Call) Return(_a0 error) *MockLogStore_GetLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogStore_GetLog_Call) RunAndReturn(run func(uint64, *raft.Log) error) *MockLogStore_GetLog_Call {
	_c.Call.Return(run)
	return _c
}

// LastIndex provides a mock function with no fields
func (_m *MockLogStore) LastIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogStore_LastIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastIndex'
type MockLogStore_LastIndex_Call struct {
	*mock.Call
}

// LastIndex is a helper method to define mock.On call
func (_e *MockLogStore_Expecter) LastIndex() *MockLogStore_LastIndex_Call {
	return &MockLogStore_LastIndex_Call{Call: _e.mock.On("LastIndex")}
}

func (_c *MockLogStore_LastIndex_Call) Run(run func()) *MockLogStore_LastIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogStore_LastIndex_Call) Return(_a0 uint64, _a1 error) *MockLogStore_LastIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogStore_LastIndex_Call) RunAndReturn(run func() (uint64, error)) *MockLogStore_LastIndex_Call {
	_c.Call.Return(run)
	return _c
}

// StoreLog provides a mock function with given fields: log
func (_m *MockLogStore) StoreLog(log *raft.Log) error {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for StoreLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*raft.Log) error); ok {
		r0 = rf(log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogStore_StoreLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreLog'
type MockLogStore_StoreLog_Call struct {
	*mock.Call
}

// StoreLog is a helper method to define mock.On call
//   - log *raft.Log
func (_e *MockLogStore_Expecter) StoreLog(log interface{}) *MockLogStore_StoreLog_Call {
	return &MockLogStore_StoreLog_Call{Call: _e.mock.On("StoreLog", log)}
}

func (_c *MockLogStore_StoreLog_Call) Run(run func(log *raft.Log)) *MockLogStore_StoreLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*raft.Log))
	})
	return _c
}

func (_c *MockLogStore_StoreLog_Call) Return(_a0 error) *MockLogStore_StoreLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogStore_StoreLog_Call) RunAndReturn(run func(*raft.Log) error) *MockLogStore_StoreLog_Call {
	_c.Call.Return(run)
	return _c
}

// StoreLogs provides a mock function with given fields: logs
func (_m *MockLogStore) StoreLogs(logs []*raft.Log) error {
	ret := _m.Called(logs)

	if len(ret) == 0 {
		panic("no return value specified for StoreLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*raft.Log) error); ok {
		r0 = rf(logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogStore_StoreLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreLogs'
type MockLogStore_StoreLogs_Call struct {
	*mock.Call
}

// StoreLogs is a helper method to define mock.On call
//   - logs []*raft.Log
func (_e *MockLogStore_Expecter) StoreLogs(logs interface{}) *MockLogStore_StoreLogs_Call {
	return &MockLogStore_StoreLogs_Call{Call: _e.mock.On("StoreLogs", logs)}
}

func (_c *MockLogStore_StoreLogs_Call) Run(run func(logs []*raft.Log)) *MockLogStore_StoreLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*raft.Log))
	})
	return _c
}

func (_c *MockLogStore_StoreLogs_Call) Return(_a0 error) *MockLogStore_StoreLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogStore_StoreLogs_Call) RunAndReturn(run func([]*raft.Log) error) *MockLogStore_StoreLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogStore creates a new instance of MockLogStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogStore {
	mock := &MockLogStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
