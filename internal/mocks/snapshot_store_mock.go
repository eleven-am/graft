// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	io "io"

	raft "github.com/hashicorp/raft"
	mock "github.com/stretchr/testify/mock"
)

// MockSnapshotStore is an autogenerated mock type for the SnapshotStore type
type MockSnapshotStore struct {
	mock.Mock
}

type MockSnapshotStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSnapshotStore) EXPECT() *MockSnapshotStore_Expecter {
	return &MockSnapshotStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: version, index, term, configuration, configurationIndex, trans
func (_m *MockSnapshotStore) Create(version raft.SnapshotVersion, index uint64, term uint64, configuration raft.Configuration, configurationIndex uint64, trans raft.Transport) (raft.SnapshotSink, error) {
	ret := _m.Called(version, index, term, configuration, configurationIndex, trans)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 raft.SnapshotSink
	var r1 error
	if rf, ok := ret.Get(0).(func(raft.SnapshotVersion, uint64, uint64, raft.Configuration, uint64, raft.Transport) (raft.SnapshotSink, error)); ok {
		return rf(version, index, term, configuration, configurationIndex, trans)
	}
	if rf, ok := ret.Get(0).(func(raft.SnapshotVersion, uint64, uint64, raft.Configuration, uint64, raft.Transport) raft.SnapshotSink); ok {
		r0 = rf(version, index, term, configuration, configurationIndex, trans)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.SnapshotSink)
		}
	}

	if rf, ok := ret.Get(1).(func(raft.SnapshotVersion, uint64, uint64, raft.Configuration, uint64, raft.Transport) error); ok {
		r1 = rf(version, index, term, configuration, configurationIndex, trans)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshotStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSnapshotStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - version raft.SnapshotVersion
//   - index uint64
//   - term uint64
//   - configuration raft.Configuration
//   - configurationIndex uint64
//   - trans raft.Transport
func (_e *MockSnapshotStore_Expecter) Create(version interface{}, index interface{}, term interface{}, configuration interface{}, configurationIndex interface{}, trans interface{}) *MockSnapshotStore_Create_Call {
	return &MockSnapshotStore_Create_Call{Call: _e.mock.On("Create", version, index, term, configuration, configurationIndex, trans)}
}

func (_c *MockSnapshotStore_Create_Call) Run(run func(version raft.SnapshotVersion, index uint64, term uint64, configuration raft.Configuration, configurationIndex uint64, trans raft.Transport)) *MockSnapshotStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(raft.SnapshotVersion), args[1].(uint64), args[2].(uint64), args[3].(raft.Configuration), args[4].(uint64), args[5].(raft.Transport))
	})
	return _c
}

func (_c *MockSnapshotStore_Create_Call) Return(_a0 raft.SnapshotSink, _a1 error) *MockSnapshotStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshotStore_Create_Call) RunAndReturn(run func(raft.SnapshotVersion, uint64, uint64, raft.Configuration, uint64, raft.Transport) (raft.SnapshotSink, error)) *MockSnapshotStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with no fields
func (_m *MockSnapshotStore) List() ([]*raft.SnapshotMeta, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*raft.SnapshotMeta
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*raft.SnapshotMeta, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*raft.SnapshotMeta); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*raft.SnapshotMeta)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshotStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSnapshotStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockSnapshotStore_Expecter) List() *MockSnapshotStore_List_Call {
	return &MockSnapshotStore_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockSnapshotStore_List_Call) Run(run func()) *MockSnapshotStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshotStore_List_Call) Return(_a0 []*raft.SnapshotMeta, _a1 error) *MockSnapshotStore_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshotStore_List_Call) RunAndReturn(run func() ([]*raft.SnapshotMeta, error)) *MockSnapshotStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: id
func (_m *MockSnapshotStore) Open(id string) (*raft.SnapshotMeta, io.ReadCloser, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *raft.SnapshotMeta
	var r1 io.ReadCloser
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*raft.SnapshotMeta, io.ReadCloser, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *raft.SnapshotMeta); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*raft.SnapshotMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(string) io.ReadCloser); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSnapshotStore_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockSnapshotStore_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - id string
func (_e *MockSnapshotStore_Expecter) Open(id interface{}) *MockSnapshotStore_Open_Call {
	return &MockSnapshotStore_Open_Call{Call: _e.mock.On("Open", id)}
}

func (_c *MockSnapshotStore_Open_Call) Run(run func(id string)) *MockSnapshotStore_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSnapshotStore_Open_Call) Return(_a0 *raft.SnapshotMeta, _a1 io.ReadCloser, _a2 error) *MockSnapshotStore_Open_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSnapshotStore_Open_Call) RunAndReturn(run func(string) (*raft.SnapshotMeta, io.ReadCloser, error)) *MockSnapshotStore_Open_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSnapshotStore creates a new instance of MockSnapshotStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSnapshotStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSnapshotStore {
	mock := &MockSnapshotStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
