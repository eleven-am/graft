// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockStableStore is an autogenerated mock type for the StableStore type
type MockStableStore struct {
	mock.Mock
}

type MockStableStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStableStore) EXPECT() *MockStableStore_Expecter {
	return &MockStableStore_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *MockStableStore) Get(key []byte) ([]byte, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStableStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStableStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key []byte
func (_e *MockStableStore_Expecter) Get(key interface{}) *MockStableStore_Get_Call {
	return &MockStableStore_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockStableStore_Get_Call) Run(run func(key []byte)) *MockStableStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockStableStore_Get_Call) Return(_a0 []byte, _a1 error) *MockStableStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStableStore_Get_Call) RunAndReturn(run func([]byte) ([]byte, error)) *MockStableStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetUint64 provides a mock function with given fields: key
func (_m *MockStableStore) GetUint64(key []byte) (uint64, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetUint64")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (uint64, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) uint64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStableStore_GetUint64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUint64'
type MockStableStore_GetUint64_Call struct {
	*mock.Call
}

// GetUint64 is a helper method to define mock.On call
//   - key []byte
func (_e *MockStableStore_Expecter) GetUint64(key interface{}) *MockStableStore_GetUint64_Call {
	return &MockStableStore_GetUint64_Call{Call: _e.mock.On("GetUint64", key)}
}

func (_c *MockStableStore_GetUint64_Call) Run(run func(key []byte)) *MockStableStore_GetUint64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockStableStore_GetUint64_Call) Return(_a0 uint64, _a1 error) *MockStableStore_GetUint64_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStableStore_GetUint64_Call) RunAndReturn(run func([]byte) (uint64, error)) *MockStableStore_GetUint64_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, val
func (_m *MockStableStore) Set(key []byte, val []byte) error {
	ret := _m.Called(key, val)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStableStore_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockStableStore_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key []byte
//   - val []byte
func (_e *MockStableStore_Expecter) Set(key interface{}, val interface{}) *MockStableStore_Set_Call {
	return &MockStableStore_Set_Call{Call: _e.mock.On("Set", key, val)}
}

func (_c *MockStableStore_Set_Call) Run(run func(key []byte, val []byte)) *MockStableStore_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockStableStore_Set_Call) Return(_a0 error) *MockStableStore_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStableStore_Set_Call) RunAndReturn(run func([]byte, []byte) error) *MockStableStore_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetUint64 provides a mock function with given fields: key, val
func (_m *MockStableStore) SetUint64(key []byte, val uint64) error {
	ret := _m.Called(key, val)

	if len(ret) == 0 {
		panic("no return value specified for SetUint64")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, uint64) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStableStore_SetUint64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUint64'
type MockStableStore_SetUint64_Call struct {
	*mock.Call
}

// SetUint64 is a helper method to define mock.On call
//   - key []byte
//   - val uint64
func (_e *MockStableStore_Expecter) SetUint64(key interface{}, val interface{}) *MockStableStore_SetUint64_Call {
	return &MockStableStore_SetUint64_Call{Call: _e.mock.On("SetUint64", key, val)}
}

func (_c *MockStableStore_SetUint64_Call) Run(run func(key []byte, val uint64)) *MockStableStore_SetUint64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(uint64))
	})
	return _c
}

func (_c *MockStableStore_SetUint64_Call) Return(_a0 error) *MockStableStore_SetUint64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStableStore_SetUint64_Call) RunAndReturn(run func([]byte, uint64) error) *MockStableStore_SetUint64_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStableStore creates a new instance of MockStableStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStableStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStableStore {
	mock := &MockStableStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
