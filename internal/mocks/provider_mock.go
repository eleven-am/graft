// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// Events provides a mock function with no fields
func (_m *MockProvider) Events() <-chan ports.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 <-chan ports.Event
	if rf, ok := ret.Get(0).(func() <-chan ports.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan ports.Event)
		}
	}

	return r0
}

// MockProvider_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type MockProvider_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Events() *MockProvider_Events_Call {
	return &MockProvider_Events_Call{Call: _e.mock.On("Events")}
}

func (_c *MockProvider_Events_Call) Run(run func()) *MockProvider_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Events_Call) Return(_a0 <-chan ports.Event) *MockProvider_Events_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_Events_Call) RunAndReturn(run func() <-chan ports.Event) *MockProvider_Events_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockProvider) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockProvider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockProvider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Name() *MockProvider_Name_Call {
	return &MockProvider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockProvider_Name_Call) Run(run func()) *MockProvider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Name_Call) Return(_a0 string) *MockProvider_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_Name_Call) RunAndReturn(run func() string) *MockProvider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Snapshot provides a mock function with no fields
func (_m *MockProvider) Snapshot() []ports.Peer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Snapshot")
	}

	var r0 []ports.Peer
	if rf, ok := ret.Get(0).(func() []ports.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ports.Peer)
		}
	}

	return r0
}

// MockProvider_Snapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snapshot'
type MockProvider_Snapshot_Call struct {
	*mock.Call
}

// Snapshot is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Snapshot() *MockProvider_Snapshot_Call {
	return &MockProvider_Snapshot_Call{Call: _e.mock.On("Snapshot")}
}

func (_c *MockProvider_Snapshot_Call) Run(run func()) *MockProvider_Snapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Snapshot_Call) Return(_a0 []ports.Peer) *MockProvider_Snapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_Snapshot_Call) RunAndReturn(run func() []ports.Peer) *MockProvider_Snapshot_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, announce
func (_m *MockProvider) Start(ctx context.Context, announce ports.NodeInfo) error {
	ret := _m.Called(ctx, announce)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ports.NodeInfo) error); ok {
		r0 = rf(ctx, announce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockProvider_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - announce ports.NodeInfo
func (_e *MockProvider_Expecter) Start(ctx interface{}, announce interface{}) *MockProvider_Start_Call {
	return &MockProvider_Start_Call{Call: _e.mock.On("Start", ctx, announce)}
}

func (_c *MockProvider_Start_Call) Run(run func(ctx context.Context, announce ports.NodeInfo)) *MockProvider_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ports.NodeInfo))
	})
	return _c
}

func (_c *MockProvider_Start_Call) Return(_a0 error) *MockProvider_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_Start_Call) RunAndReturn(run func(context.Context, ports.NodeInfo) error) *MockProvider_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockProvider) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockProvider_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Stop() *MockProvider_Stop_Call {
	return &MockProvider_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockProvider_Stop_Call) Run(run func()) *MockProvider_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Stop_Call) Return(_a0 error) *MockProvider_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_Stop_Call) RunAndReturn(run func() error) *MockProvider_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
