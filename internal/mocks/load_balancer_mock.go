// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockLoadBalancer is an autogenerated mock type for the LoadBalancer type
type MockLoadBalancer struct {
	mock.Mock
}

type MockLoadBalancer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoadBalancer) EXPECT() *MockLoadBalancer_Expecter {
	return &MockLoadBalancer_Expecter{mock: &_m.Mock}
}

// GetClusterLoad provides a mock function with no fields
func (_m *MockLoadBalancer) GetClusterLoad() (map[string]*ports.NodeLoad, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterLoad")
	}

	var r0 map[string]*ports.NodeLoad
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]*ports.NodeLoad, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]*ports.NodeLoad); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*ports.NodeLoad)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoadBalancer_GetClusterLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterLoad'
type MockLoadBalancer_GetClusterLoad_Call struct {
	*mock.Call
}

// GetClusterLoad is a helper method to define mock.On call
func (_e *MockLoadBalancer_Expecter) GetClusterLoad() *MockLoadBalancer_GetClusterLoad_Call {
	return &MockLoadBalancer_GetClusterLoad_Call{Call: _e.mock.On("GetClusterLoad")}
}

func (_c *MockLoadBalancer_GetClusterLoad_Call) Run(run func()) *MockLoadBalancer_GetClusterLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoadBalancer_GetClusterLoad_Call) Return(_a0 map[string]*ports.NodeLoad, _a1 error) *MockLoadBalancer_GetClusterLoad_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoadBalancer_GetClusterLoad_Call) RunAndReturn(run func() (map[string]*ports.NodeLoad, error)) *MockLoadBalancer_GetClusterLoad_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeLoad provides a mock function with given fields: nodeID
func (_m *MockLoadBalancer) GetNodeLoad(nodeID string) (*ports.NodeLoad, error) {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeLoad")
	}

	var r0 *ports.NodeLoad
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ports.NodeLoad, error)); ok {
		return rf(nodeID)
	}
	if rf, ok := ret.Get(0).(func(string) *ports.NodeLoad); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.NodeLoad)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoadBalancer_GetNodeLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeLoad'
type MockLoadBalancer_GetNodeLoad_Call struct {
	*mock.Call
}

// GetNodeLoad is a helper method to define mock.On call
//   - nodeID string
func (_e *MockLoadBalancer_Expecter) GetNodeLoad(nodeID interface{}) *MockLoadBalancer_GetNodeLoad_Call {
	return &MockLoadBalancer_GetNodeLoad_Call{Call: _e.mock.On("GetNodeLoad", nodeID)}
}

func (_c *MockLoadBalancer_GetNodeLoad_Call) Run(run func(nodeID string)) *MockLoadBalancer_GetNodeLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLoadBalancer_GetNodeLoad_Call) Return(_a0 *ports.NodeLoad, _a1 error) *MockLoadBalancer_GetNodeLoad_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoadBalancer_GetNodeLoad_Call) RunAndReturn(run func(string) (*ports.NodeLoad, error)) *MockLoadBalancer_GetNodeLoad_Call {
	_c.Call.Return(run)
	return _c
}

// IsDraining provides a mock function with no fields
func (_m *MockLoadBalancer) IsDraining() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDraining")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockLoadBalancer_IsDraining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDraining'
type MockLoadBalancer_IsDraining_Call struct {
	*mock.Call
}

// IsDraining is a helper method to define mock.On call
func (_e *MockLoadBalancer_Expecter) IsDraining() *MockLoadBalancer_IsDraining_Call {
	return &MockLoadBalancer_IsDraining_Call{Call: _e.mock.On("IsDraining")}
}

func (_c *MockLoadBalancer_IsDraining_Call) Run(run func()) *MockLoadBalancer_IsDraining_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoadBalancer_IsDraining_Call) Return(_a0 bool) *MockLoadBalancer_IsDraining_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoadBalancer_IsDraining_Call) RunAndReturn(run func() bool) *MockLoadBalancer_IsDraining_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldExecuteNode provides a mock function with given fields: nodeID, workflowID, nodeName
func (_m *MockLoadBalancer) ShouldExecuteNode(nodeID string, workflowID string, nodeName string) (bool, error) {
	ret := _m.Called(nodeID, workflowID, nodeName)

	if len(ret) == 0 {
		panic("no return value specified for ShouldExecuteNode")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (bool, error)); ok {
		return rf(nodeID, workflowID, nodeName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(nodeID, workflowID, nodeName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(nodeID, workflowID, nodeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoadBalancer_ShouldExecuteNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldExecuteNode'
type MockLoadBalancer_ShouldExecuteNode_Call struct {
	*mock.Call
}

// ShouldExecuteNode is a helper method to define mock.On call
//   - nodeID string
//   - workflowID string
//   - nodeName string
func (_e *MockLoadBalancer_Expecter) ShouldExecuteNode(nodeID interface{}, workflowID interface{}, nodeName interface{}) *MockLoadBalancer_ShouldExecuteNode_Call {
	return &MockLoadBalancer_ShouldExecuteNode_Call{Call: _e.mock.On("ShouldExecuteNode", nodeID, workflowID, nodeName)}
}

func (_c *MockLoadBalancer_ShouldExecuteNode_Call) Run(run func(nodeID string, workflowID string, nodeName string)) *MockLoadBalancer_ShouldExecuteNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockLoadBalancer_ShouldExecuteNode_Call) Return(_a0 bool, _a1 error) *MockLoadBalancer_ShouldExecuteNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoadBalancer_ShouldExecuteNode_Call) RunAndReturn(run func(string, string, string) (bool, error)) *MockLoadBalancer_ShouldExecuteNode_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockLoadBalancer) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoadBalancer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockLoadBalancer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoadBalancer_Expecter) Start(ctx interface{}) *MockLoadBalancer_Start_Call {
	return &MockLoadBalancer_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockLoadBalancer_Start_Call) Run(run func(ctx context.Context)) *MockLoadBalancer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoadBalancer_Start_Call) Return(_a0 error) *MockLoadBalancer_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoadBalancer_Start_Call) RunAndReturn(run func(context.Context) error) *MockLoadBalancer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartDraining provides a mock function with no fields
func (_m *MockLoadBalancer) StartDraining() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartDraining")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoadBalancer_StartDraining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartDraining'
type MockLoadBalancer_StartDraining_Call struct {
	*mock.Call
}

// StartDraining is a helper method to define mock.On call
func (_e *MockLoadBalancer_Expecter) StartDraining() *MockLoadBalancer_StartDraining_Call {
	return &MockLoadBalancer_StartDraining_Call{Call: _e.mock.On("StartDraining")}
}

func (_c *MockLoadBalancer_StartDraining_Call) Run(run func()) *MockLoadBalancer_StartDraining_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoadBalancer_StartDraining_Call) Return(_a0 error) *MockLoadBalancer_StartDraining_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoadBalancer_StartDraining_Call) RunAndReturn(run func() error) *MockLoadBalancer_StartDraining_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockLoadBalancer) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoadBalancer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockLoadBalancer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockLoadBalancer_Expecter) Stop() *MockLoadBalancer_Stop_Call {
	return &MockLoadBalancer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockLoadBalancer_Stop_Call) Run(run func()) *MockLoadBalancer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoadBalancer_Stop_Call) Return(_a0 error) *MockLoadBalancer_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoadBalancer_Stop_Call) RunAndReturn(run func() error) *MockLoadBalancer_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// StopDraining provides a mock function with no fields
func (_m *MockLoadBalancer) StopDraining() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StopDraining")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoadBalancer_StopDraining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopDraining'
type MockLoadBalancer_StopDraining_Call struct {
	*mock.Call
}

// StopDraining is a helper method to define mock.On call
func (_e *MockLoadBalancer_Expecter) StopDraining() *MockLoadBalancer_StopDraining_Call {
	return &MockLoadBalancer_StopDraining_Call{Call: _e.mock.On("StopDraining")}
}

func (_c *MockLoadBalancer_StopDraining_Call) Run(run func()) *MockLoadBalancer_StopDraining_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoadBalancer_StopDraining_Call) Return(_a0 error) *MockLoadBalancer_StopDraining_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoadBalancer_StopDraining_Call) RunAndReturn(run func() error) *MockLoadBalancer_StopDraining_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForDraining provides a mock function with given fields: ctx
func (_m *MockLoadBalancer) WaitForDraining(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitForDraining")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoadBalancer_WaitForDraining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForDraining'
type MockLoadBalancer_WaitForDraining_Call struct {
	*mock.Call
}

// WaitForDraining is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoadBalancer_Expecter) WaitForDraining(ctx interface{}) *MockLoadBalancer_WaitForDraining_Call {
	return &MockLoadBalancer_WaitForDraining_Call{Call: _e.mock.On("WaitForDraining", ctx)}
}

func (_c *MockLoadBalancer_WaitForDraining_Call) Run(run func(ctx context.Context)) *MockLoadBalancer_WaitForDraining_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoadBalancer_WaitForDraining_Call) Return(_a0 error) *MockLoadBalancer_WaitForDraining_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoadBalancer_WaitForDraining_Call) RunAndReturn(run func(context.Context) error) *MockLoadBalancer_WaitForDraining_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoadBalancer creates a new instance of MockLoadBalancer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoadBalancer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoadBalancer {
	mock := &MockLoadBalancer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
