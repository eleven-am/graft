// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eleven-am/graft/internal/domain"
	mock "github.com/stretchr/testify/mock"

	ports "github.com/eleven-am/graft/internal/ports"
)

// MockTransportPort is an autogenerated mock type for the TransportPort type
type MockTransportPort struct {
	mock.Mock
}

type MockTransportPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransportPort) EXPECT() *MockTransportPort_Expecter {
	return &MockTransportPort_Expecter{mock: &_m.Mock}
}

// RegisterEngine provides a mock function with given fields: engine
func (_m *MockTransportPort) RegisterEngine(engine ports.EnginePort) {
	_m.Called(engine)
}

// MockTransportPort_RegisterEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEngine'
type MockTransportPort_RegisterEngine_Call struct {
	*mock.Call
}

// RegisterEngine is a helper method to define mock.On call
//   - engine ports.EnginePort
func (_e *MockTransportPort_Expecter) RegisterEngine(engine interface{}) *MockTransportPort_RegisterEngine_Call {
	return &MockTransportPort_RegisterEngine_Call{Call: _e.mock.On("RegisterEngine", engine)}
}

func (_c *MockTransportPort_RegisterEngine_Call) Run(run func(engine ports.EnginePort)) *MockTransportPort_RegisterEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ports.EnginePort))
	})
	return _c
}

func (_c *MockTransportPort_RegisterEngine_Call) Return() *MockTransportPort_RegisterEngine_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransportPort_RegisterEngine_Call) RunAndReturn(run func(ports.EnginePort)) *MockTransportPort_RegisterEngine_Call {
	_c.Run(run)
	return _c
}

// RegisterLoadSink provides a mock function with given fields: sink
func (_m *MockTransportPort) RegisterLoadSink(sink ports.LoadSink) {
	_m.Called(sink)
}

// MockTransportPort_RegisterLoadSink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterLoadSink'
type MockTransportPort_RegisterLoadSink_Call struct {
	*mock.Call
}

// RegisterLoadSink is a helper method to define mock.On call
//   - sink ports.LoadSink
func (_e *MockTransportPort_Expecter) RegisterLoadSink(sink interface{}) *MockTransportPort_RegisterLoadSink_Call {
	return &MockTransportPort_RegisterLoadSink_Call{Call: _e.mock.On("RegisterLoadSink", sink)}
}

func (_c *MockTransportPort_RegisterLoadSink_Call) Run(run func(sink ports.LoadSink)) *MockTransportPort_RegisterLoadSink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ports.LoadSink))
	})
	return _c
}

func (_c *MockTransportPort_RegisterLoadSink_Call) Return() *MockTransportPort_RegisterLoadSink_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransportPort_RegisterLoadSink_Call) RunAndReturn(run func(ports.LoadSink)) *MockTransportPort_RegisterLoadSink_Call {
	_c.Run(run)
	return _c
}

// RegisterRaft provides a mock function with given fields: raft
func (_m *MockTransportPort) RegisterRaft(raft ports.RaftNode) {
	_m.Called(raft)
}

// MockTransportPort_RegisterRaft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRaft'
type MockTransportPort_RegisterRaft_Call struct {
	*mock.Call
}

// RegisterRaft is a helper method to define mock.On call
//   - raft ports.RaftNode
func (_e *MockTransportPort_Expecter) RegisterRaft(raft interface{}) *MockTransportPort_RegisterRaft_Call {
	return &MockTransportPort_RegisterRaft_Call{Call: _e.mock.On("RegisterRaft", raft)}
}

func (_c *MockTransportPort_RegisterRaft_Call) Run(run func(raft ports.RaftNode)) *MockTransportPort_RegisterRaft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ports.RaftNode))
	})
	return _c
}

func (_c *MockTransportPort_RegisterRaft_Call) Return() *MockTransportPort_RegisterRaft_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransportPort_RegisterRaft_Call) RunAndReturn(run func(ports.RaftNode)) *MockTransportPort_RegisterRaft_Call {
	_c.Run(run)
	return _c
}

// SendApplyCommand provides a mock function with given fields: ctx, nodeAddr, cmd
func (_m *MockTransportPort) SendApplyCommand(ctx context.Context, nodeAddr string, cmd *domain.Command) (*domain.CommandResult, string, error) {
	ret := _m.Called(ctx, nodeAddr, cmd)

	if len(ret) == 0 {
		panic("no return value specified for SendApplyCommand")
	}

	var r0 *domain.CommandResult
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Command) (*domain.CommandResult, string, error)); ok {
		return rf(ctx, nodeAddr, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Command) *domain.CommandResult); ok {
		r0 = rf(ctx, nodeAddr, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CommandResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.Command) string); ok {
		r1 = rf(ctx, nodeAddr, cmd)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *domain.Command) error); ok {
		r2 = rf(ctx, nodeAddr, cmd)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTransportPort_SendApplyCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendApplyCommand'
type MockTransportPort_SendApplyCommand_Call struct {
	*mock.Call
}

// SendApplyCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeAddr string
//   - cmd *domain.Command
func (_e *MockTransportPort_Expecter) SendApplyCommand(ctx interface{}, nodeAddr interface{}, cmd interface{}) *MockTransportPort_SendApplyCommand_Call {
	return &MockTransportPort_SendApplyCommand_Call{Call: _e.mock.On("SendApplyCommand", ctx, nodeAddr, cmd)}
}

func (_c *MockTransportPort_SendApplyCommand_Call) Run(run func(ctx context.Context, nodeAddr string, cmd *domain.Command)) *MockTransportPort_SendApplyCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.Command))
	})
	return _c
}

func (_c *MockTransportPort_SendApplyCommand_Call) Return(_a0 *domain.CommandResult, _a1 string, _a2 error) *MockTransportPort_SendApplyCommand_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTransportPort_SendApplyCommand_Call) RunAndReturn(run func(context.Context, string, *domain.Command) (*domain.CommandResult, string, error)) *MockTransportPort_SendApplyCommand_Call {
	_c.Call.Return(run)
	return _c
}

// SendJoinRequest provides a mock function with given fields: ctx, nodeAddr, request
func (_m *MockTransportPort) SendJoinRequest(ctx context.Context, nodeAddr string, request *ports.JoinRequest) (*ports.JoinResponse, error) {
	ret := _m.Called(ctx, nodeAddr, request)

	if len(ret) == 0 {
		panic("no return value specified for SendJoinRequest")
	}

	var r0 *ports.JoinResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *ports.JoinRequest) (*ports.JoinResponse, error)); ok {
		return rf(ctx, nodeAddr, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *ports.JoinRequest) *ports.JoinResponse); ok {
		r0 = rf(ctx, nodeAddr, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.JoinResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *ports.JoinRequest) error); ok {
		r1 = rf(ctx, nodeAddr, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransportPort_SendJoinRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendJoinRequest'
type MockTransportPort_SendJoinRequest_Call struct {
	*mock.Call
}

// SendJoinRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeAddr string
//   - request *ports.JoinRequest
func (_e *MockTransportPort_Expecter) SendJoinRequest(ctx interface{}, nodeAddr interface{}, request interface{}) *MockTransportPort_SendJoinRequest_Call {
	return &MockTransportPort_SendJoinRequest_Call{Call: _e.mock.On("SendJoinRequest", ctx, nodeAddr, request)}
}

func (_c *MockTransportPort_SendJoinRequest_Call) Run(run func(ctx context.Context, nodeAddr string, request *ports.JoinRequest)) *MockTransportPort_SendJoinRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ports.JoinRequest))
	})
	return _c
}

func (_c *MockTransportPort_SendJoinRequest_Call) Return(_a0 *ports.JoinResponse, _a1 error) *MockTransportPort_SendJoinRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransportPort_SendJoinRequest_Call) RunAndReturn(run func(context.Context, string, *ports.JoinRequest) (*ports.JoinResponse, error)) *MockTransportPort_SendJoinRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendPublishLoad provides a mock function with given fields: ctx, nodeAddr, update
func (_m *MockTransportPort) SendPublishLoad(ctx context.Context, nodeAddr string, update ports.LoadUpdate) error {
	ret := _m.Called(ctx, nodeAddr, update)

	if len(ret) == 0 {
		panic("no return value specified for SendPublishLoad")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ports.LoadUpdate) error); ok {
		r0 = rf(ctx, nodeAddr, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransportPort_SendPublishLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPublishLoad'
type MockTransportPort_SendPublishLoad_Call struct {
	*mock.Call
}

// SendPublishLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeAddr string
//   - update ports.LoadUpdate
func (_e *MockTransportPort_Expecter) SendPublishLoad(ctx interface{}, nodeAddr interface{}, update interface{}) *MockTransportPort_SendPublishLoad_Call {
	return &MockTransportPort_SendPublishLoad_Call{Call: _e.mock.On("SendPublishLoad", ctx, nodeAddr, update)}
}

func (_c *MockTransportPort_SendPublishLoad_Call) Run(run func(ctx context.Context, nodeAddr string, update ports.LoadUpdate)) *MockTransportPort_SendPublishLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(ports.LoadUpdate))
	})
	return _c
}

func (_c *MockTransportPort_SendPublishLoad_Call) Return(_a0 error) *MockTransportPort_SendPublishLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransportPort_SendPublishLoad_Call) RunAndReturn(run func(context.Context, string, ports.LoadUpdate) error) *MockTransportPort_SendPublishLoad_Call {
	_c.Call.Return(run)
	return _c
}

// SendTrigger provides a mock function with given fields: ctx, nodeAddr, trigger
func (_m *MockTransportPort) SendTrigger(ctx context.Context, nodeAddr string, trigger domain.WorkflowTrigger) error {
	ret := _m.Called(ctx, nodeAddr, trigger)

	if len(ret) == 0 {
		panic("no return value specified for SendTrigger")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.WorkflowTrigger) error); ok {
		r0 = rf(ctx, nodeAddr, trigger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransportPort_SendTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTrigger'
type MockTransportPort_SendTrigger_Call struct {
	*mock.Call
}

// SendTrigger is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeAddr string
//   - trigger domain.WorkflowTrigger
func (_e *MockTransportPort_Expecter) SendTrigger(ctx interface{}, nodeAddr interface{}, trigger interface{}) *MockTransportPort_SendTrigger_Call {
	return &MockTransportPort_SendTrigger_Call{Call: _e.mock.On("SendTrigger", ctx, nodeAddr, trigger)}
}

func (_c *MockTransportPort_SendTrigger_Call) Run(run func(ctx context.Context, nodeAddr string, trigger domain.WorkflowTrigger)) *MockTransportPort_SendTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.WorkflowTrigger))
	})
	return _c
}

func (_c *MockTransportPort_SendTrigger_Call) Return(_a0 error) *MockTransportPort_SendTrigger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransportPort_SendTrigger_Call) RunAndReturn(run func(context.Context, string, domain.WorkflowTrigger) error) *MockTransportPort_SendTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, address, port
func (_m *MockTransportPort) Start(ctx context.Context, address string, port int) error {
	ret := _m.Called(ctx, address, port)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, address, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransportPort_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockTransportPort_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
//   - port int
func (_e *MockTransportPort_Expecter) Start(ctx interface{}, address interface{}, port interface{}) *MockTransportPort_Start_Call {
	return &MockTransportPort_Start_Call{Call: _e.mock.On("Start", ctx, address, port)}
}

func (_c *MockTransportPort_Start_Call) Run(run func(ctx context.Context, address string, port int)) *MockTransportPort_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockTransportPort_Start_Call) Return(_a0 error) *MockTransportPort_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransportPort_Start_Call) RunAndReturn(run func(context.Context, string, int) error) *MockTransportPort_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockTransportPort) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransportPort_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockTransportPort_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockTransportPort_Expecter) Stop() *MockTransportPort_Stop_Call {
	return &MockTransportPort_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockTransportPort_Stop_Call) Run(run func()) *MockTransportPort_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransportPort_Stop_Call) Return(_a0 error) *MockTransportPort_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransportPort_Stop_Call) RunAndReturn(run func() error) *MockTransportPort_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransportPort creates a new instance of MockTransportPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransportPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransportPort {
	mock := &MockTransportPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
