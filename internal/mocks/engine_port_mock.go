// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eleven-am/graft/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockEnginePort is an autogenerated mock type for the EnginePort type
type MockEnginePort struct {
	mock.Mock
}

type MockEnginePort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnginePort) EXPECT() *MockEnginePort_Expecter {
	return &MockEnginePort_Expecter{mock: &_m.Mock}
}

// GetMetrics provides a mock function with no fields
func (_m *MockEnginePort) GetMetrics() domain.ExecutionMetrics {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 domain.ExecutionMetrics
	if rf, ok := ret.Get(0).(func() domain.ExecutionMetrics); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.ExecutionMetrics)
	}

	return r0
}

// MockEnginePort_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockEnginePort_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
func (_e *MockEnginePort_Expecter) GetMetrics() *MockEnginePort_GetMetrics_Call {
	return &MockEnginePort_GetMetrics_Call{Call: _e.mock.On("GetMetrics")}
}

func (_c *MockEnginePort_GetMetrics_Call) Run(run func()) *MockEnginePort_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnginePort_GetMetrics_Call) Return(_a0 domain.ExecutionMetrics) *MockEnginePort_GetMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnginePort_GetMetrics_Call) RunAndReturn(run func() domain.ExecutionMetrics) *MockEnginePort_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowStatus provides a mock function with given fields: workflowID
func (_m *MockEnginePort) GetWorkflowStatus(workflowID string) (*domain.WorkflowStatus, error) {
	ret := _m.Called(workflowID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowStatus")
	}

	var r0 *domain.WorkflowStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.WorkflowStatus, error)); ok {
		return rf(workflowID)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.WorkflowStatus); ok {
		r0 = rf(workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WorkflowStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(workflowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnginePort_GetWorkflowStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowStatus'
type MockEnginePort_GetWorkflowStatus_Call struct {
	*mock.Call
}

// GetWorkflowStatus is a helper method to define mock.On call
//   - workflowID string
func (_e *MockEnginePort_Expecter) GetWorkflowStatus(workflowID interface{}) *MockEnginePort_GetWorkflowStatus_Call {
	return &MockEnginePort_GetWorkflowStatus_Call{Call: _e.mock.On("GetWorkflowStatus", workflowID)}
}

func (_c *MockEnginePort_GetWorkflowStatus_Call) Run(run func(workflowID string)) *MockEnginePort_GetWorkflowStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEnginePort_GetWorkflowStatus_Call) Return(_a0 *domain.WorkflowStatus, _a1 error) *MockEnginePort_GetWorkflowStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnginePort_GetWorkflowStatus_Call) RunAndReturn(run func(string) (*domain.WorkflowStatus, error)) *MockEnginePort_GetWorkflowStatus_Call {
	_c.Call.Return(run)
	return _c
}

// PauseWorkflow provides a mock function with given fields: ctx, workflowID
func (_m *MockEnginePort) PauseWorkflow(ctx context.Context, workflowID string) error {
	ret := _m.Called(ctx, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for PauseWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, workflowID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnginePort_PauseWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PauseWorkflow'
type MockEnginePort_PauseWorkflow_Call struct {
	*mock.Call
}

// PauseWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
func (_e *MockEnginePort_Expecter) PauseWorkflow(ctx interface{}, workflowID interface{}) *MockEnginePort_PauseWorkflow_Call {
	return &MockEnginePort_PauseWorkflow_Call{Call: _e.mock.On("PauseWorkflow", ctx, workflowID)}
}

func (_c *MockEnginePort_PauseWorkflow_Call) Run(run func(ctx context.Context, workflowID string)) *MockEnginePort_PauseWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEnginePort_PauseWorkflow_Call) Return(_a0 error) *MockEnginePort_PauseWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnginePort_PauseWorkflow_Call) RunAndReturn(run func(context.Context, string) error) *MockEnginePort_PauseWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessTrigger provides a mock function with given fields: trigger
func (_m *MockEnginePort) ProcessTrigger(trigger domain.WorkflowTrigger) error {
	ret := _m.Called(trigger)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTrigger")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.WorkflowTrigger) error); ok {
		r0 = rf(trigger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnginePort_ProcessTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTrigger'
type MockEnginePort_ProcessTrigger_Call struct {
	*mock.Call
}

// ProcessTrigger is a helper method to define mock.On call
//   - trigger domain.WorkflowTrigger
func (_e *MockEnginePort_Expecter) ProcessTrigger(trigger interface{}) *MockEnginePort_ProcessTrigger_Call {
	return &MockEnginePort_ProcessTrigger_Call{Call: _e.mock.On("ProcessTrigger", trigger)}
}

func (_c *MockEnginePort_ProcessTrigger_Call) Run(run func(trigger domain.WorkflowTrigger)) *MockEnginePort_ProcessTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.WorkflowTrigger))
	})
	return _c
}

func (_c *MockEnginePort_ProcessTrigger_Call) Return(_a0 error) *MockEnginePort_ProcessTrigger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnginePort_ProcessTrigger_Call) RunAndReturn(run func(domain.WorkflowTrigger) error) *MockEnginePort_ProcessTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// ResumeWorkflow provides a mock function with given fields: ctx, workflowID
func (_m *MockEnginePort) ResumeWorkflow(ctx context.Context, workflowID string) error {
	ret := _m.Called(ctx, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for ResumeWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, workflowID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnginePort_ResumeWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumeWorkflow'
type MockEnginePort_ResumeWorkflow_Call struct {
	*mock.Call
}

// ResumeWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
func (_e *MockEnginePort_Expecter) ResumeWorkflow(ctx interface{}, workflowID interface{}) *MockEnginePort_ResumeWorkflow_Call {
	return &MockEnginePort_ResumeWorkflow_Call{Call: _e.mock.On("ResumeWorkflow", ctx, workflowID)}
}

func (_c *MockEnginePort_ResumeWorkflow_Call) Run(run func(ctx context.Context, workflowID string)) *MockEnginePort_ResumeWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEnginePort_ResumeWorkflow_Call) Return(_a0 error) *MockEnginePort_ResumeWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnginePort_ResumeWorkflow_Call) RunAndReturn(run func(context.Context, string) error) *MockEnginePort_ResumeWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockEnginePort) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnginePort_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEnginePort_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEnginePort_Expecter) Start(ctx interface{}) *MockEnginePort_Start_Call {
	return &MockEnginePort_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockEnginePort_Start_Call) Run(run func(ctx context.Context)) *MockEnginePort_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEnginePort_Start_Call) Return(_a0 error) *MockEnginePort_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnginePort_Start_Call) RunAndReturn(run func(context.Context) error) *MockEnginePort_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockEnginePort) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnginePort_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockEnginePort_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockEnginePort_Expecter) Stop() *MockEnginePort_Stop_Call {
	return &MockEnginePort_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockEnginePort_Stop_Call) Run(run func()) *MockEnginePort_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnginePort_Stop_Call) Return(_a0 error) *MockEnginePort_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnginePort_Stop_Call) RunAndReturn(run func() error) *MockEnginePort_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// StopWorkflow provides a mock function with given fields: ctx, workflowID
func (_m *MockEnginePort) StopWorkflow(ctx context.Context, workflowID string) error {
	ret := _m.Called(ctx, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for StopWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, workflowID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnginePort_StopWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopWorkflow'
type MockEnginePort_StopWorkflow_Call struct {
	*mock.Call
}

// StopWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
func (_e *MockEnginePort_Expecter) StopWorkflow(ctx interface{}, workflowID interface{}) *MockEnginePort_StopWorkflow_Call {
	return &MockEnginePort_StopWorkflow_Call{Call: _e.mock.On("StopWorkflow", ctx, workflowID)}
}

func (_c *MockEnginePort_StopWorkflow_Call) Run(run func(ctx context.Context, workflowID string)) *MockEnginePort_StopWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEnginePort_StopWorkflow_Call) Return(_a0 error) *MockEnginePort_StopWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnginePort_StopWorkflow_Call) RunAndReturn(run func(context.Context, string) error) *MockEnginePort_StopWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEnginePort creates a new instance of MockEnginePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnginePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnginePort {
	mock := &MockEnginePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
