// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	ports "github.com/eleven-am/graft/internal/ports"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockTransaction is an autogenerated mock type for the Transaction type
type MockTransaction struct {
	mock.Mock
}

type MockTransaction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransaction) EXPECT() *MockTransaction_Expecter {
	return &MockTransaction_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with no fields
func (_m *MockTransaction) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransaction_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockTransaction_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockTransaction_Expecter) Commit() *MockTransaction_Commit_Call {
	return &MockTransaction_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockTransaction_Commit_Call) Run(run func()) *MockTransaction_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransaction_Commit_Call) Return(_a0 error) *MockTransaction_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransaction_Commit_Call) RunAndReturn(run func() error) *MockTransaction_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *MockTransaction) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransaction_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTransaction_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *MockTransaction_Expecter) Delete(key interface{}) *MockTransaction_Delete_Call {
	return &MockTransaction_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockTransaction_Delete_Call) Run(run func(key string)) *MockTransaction_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTransaction_Delete_Call) Return(_a0 error) *MockTransaction_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransaction_Delete_Call) RunAndReturn(run func(string) error) *MockTransaction_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: key
func (_m *MockTransaction) Exists(key string) (bool, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransaction_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockTransaction_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - key string
func (_e *MockTransaction_Expecter) Exists(key interface{}) *MockTransaction_Exists_Call {
	return &MockTransaction_Exists_Call{Call: _e.mock.On("Exists", key)}
}

func (_c *MockTransaction_Exists_Call) Run(run func(key string)) *MockTransaction_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTransaction_Exists_Call) Return(_a0 bool, _a1 error) *MockTransaction_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransaction_Exists_Call) RunAndReturn(run func(string) (bool, error)) *MockTransaction_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockTransaction) Get(key string) ([]byte, int64, bool, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 int64
	var r2 bool
	var r3 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, int64, bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) int64); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string) bool); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(key)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockTransaction_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTransaction_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockTransaction_Expecter) Get(key interface{}) *MockTransaction_Get_Call {
	return &MockTransaction_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockTransaction_Get_Call) Run(run func(key string)) *MockTransaction_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTransaction_Get_Call) Return(value []byte, version int64, exists bool, err error) *MockTransaction_Get_Call {
	_c.Call.Return(value, version, exists, err)
	return _c
}

func (_c *MockTransaction_Get_Call) RunAndReturn(run func(string) ([]byte, int64, bool, error)) *MockTransaction_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function with given fields: key
func (_m *MockTransaction) GetMetadata(key string) (*ports.KeyMetadata, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 *ports.KeyMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ports.KeyMetadata, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *ports.KeyMetadata); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.KeyMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransaction_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type MockTransaction_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
//   - key string
func (_e *MockTransaction_Expecter) GetMetadata(key interface{}) *MockTransaction_GetMetadata_Call {
	return &MockTransaction_GetMetadata_Call{Call: _e.mock.On("GetMetadata", key)}
}

func (_c *MockTransaction_GetMetadata_Call) Run(run func(key string)) *MockTransaction_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTransaction_GetMetadata_Call) Return(_a0 *ports.KeyMetadata, _a1 error) *MockTransaction_GetMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransaction_GetMetadata_Call) RunAndReturn(run func(string) (*ports.KeyMetadata, error)) *MockTransaction_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: key, value, version
func (_m *MockTransaction) Put(key string, value []byte, version int64) error {
	ret := _m.Called(key, value, version)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, int64) error); ok {
		r0 = rf(key, value, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransaction_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockTransaction_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - key string
//   - value []byte
//   - version int64
func (_e *MockTransaction_Expecter) Put(key interface{}, value interface{}, version interface{}) *MockTransaction_Put_Call {
	return &MockTransaction_Put_Call{Call: _e.mock.On("Put", key, value, version)}
}

func (_c *MockTransaction_Put_Call) Run(run func(key string, value []byte, version int64)) *MockTransaction_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(int64))
	})
	return _c
}

func (_c *MockTransaction_Put_Call) Return(_a0 error) *MockTransaction_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransaction_Put_Call) RunAndReturn(run func(string, []byte, int64) error) *MockTransaction_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutWithTTL provides a mock function with given fields: key, value, version, ttl
func (_m *MockTransaction) PutWithTTL(key string, value []byte, version int64, ttl time.Duration) error {
	ret := _m.Called(key, value, version, ttl)

	if len(ret) == 0 {
		panic("no return value specified for PutWithTTL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, int64, time.Duration) error); ok {
		r0 = rf(key, value, version, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransaction_PutWithTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutWithTTL'
type MockTransaction_PutWithTTL_Call struct {
	*mock.Call
}

// PutWithTTL is a helper method to define mock.On call
//   - key string
//   - value []byte
//   - version int64
//   - ttl time.Duration
func (_e *MockTransaction_Expecter) PutWithTTL(key interface{}, value interface{}, version interface{}, ttl interface{}) *MockTransaction_PutWithTTL_Call {
	return &MockTransaction_PutWithTTL_Call{Call: _e.mock.On("PutWithTTL", key, value, version, ttl)}
}

func (_c *MockTransaction_PutWithTTL_Call) Run(run func(key string, value []byte, version int64, ttl time.Duration)) *MockTransaction_PutWithTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(int64), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockTransaction_PutWithTTL_Call) Return(_a0 error) *MockTransaction_PutWithTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransaction_PutWithTTL_Call) RunAndReturn(run func(string, []byte, int64, time.Duration) error) *MockTransaction_PutWithTTL_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with no fields
func (_m *MockTransaction) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransaction_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockTransaction_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *MockTransaction_Expecter) Rollback() *MockTransaction_Rollback_Call {
	return &MockTransaction_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *MockTransaction_Rollback_Call) Run(run func()) *MockTransaction_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransaction_Rollback_Call) Return(_a0 error) *MockTransaction_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransaction_Rollback_Call) RunAndReturn(run func() error) *MockTransaction_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransaction creates a new instance of MockTransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransaction {
	mock := &MockTransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
