// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eleven-am/graft/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockStateManagerInterface is an autogenerated mock type for the StateManagerInterface type
type MockStateManagerInterface struct {
	mock.Mock
}

type MockStateManagerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateManagerInterface) EXPECT() *MockStateManagerInterface_Expecter {
	return &MockStateManagerInterface_Expecter{mock: &_m.Mock}
}

// LoadWorkflowState provides a mock function with given fields: ctx, workflowID
func (_m *MockStateManagerInterface) LoadWorkflowState(ctx context.Context, workflowID string) (*domain.WorkflowInstance, error) {
	ret := _m.Called(ctx, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for LoadWorkflowState")
	}

	var r0 *domain.WorkflowInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.WorkflowInstance, error)); ok {
		return rf(ctx, workflowID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.WorkflowInstance); ok {
		r0 = rf(ctx, workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WorkflowInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateManagerInterface_LoadWorkflowState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadWorkflowState'
type MockStateManagerInterface_LoadWorkflowState_Call struct {
	*mock.Call
}

// LoadWorkflowState is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
func (_e *MockStateManagerInterface_Expecter) LoadWorkflowState(ctx interface{}, workflowID interface{}) *MockStateManagerInterface_LoadWorkflowState_Call {
	return &MockStateManagerInterface_LoadWorkflowState_Call{Call: _e.mock.On("LoadWorkflowState", ctx, workflowID)}
}

func (_c *MockStateManagerInterface_LoadWorkflowState_Call) Run(run func(ctx context.Context, workflowID string)) *MockStateManagerInterface_LoadWorkflowState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStateManagerInterface_LoadWorkflowState_Call) Return(_a0 *domain.WorkflowInstance, _a1 error) *MockStateManagerInterface_LoadWorkflowState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateManagerInterface_LoadWorkflowState_Call) RunAndReturn(run func(context.Context, string) (*domain.WorkflowInstance, error)) *MockStateManagerInterface_LoadWorkflowState_Call {
	_c.Call.Return(run)
	return _c
}

// SaveWorkflowState provides a mock function with given fields: ctx, workflow
func (_m *MockStateManagerInterface) SaveWorkflowState(ctx context.Context, workflow *domain.WorkflowInstance) error {
	ret := _m.Called(ctx, workflow)

	if len(ret) == 0 {
		panic("no return value specified for SaveWorkflowState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.WorkflowInstance) error); ok {
		r0 = rf(ctx, workflow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateManagerInterface_SaveWorkflowState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveWorkflowState'
type MockStateManagerInterface_SaveWorkflowState_Call struct {
	*mock.Call
}

// SaveWorkflowState is a helper method to define mock.On call
//   - ctx context.Context
//   - workflow *domain.WorkflowInstance
func (_e *MockStateManagerInterface_Expecter) SaveWorkflowState(ctx interface{}, workflow interface{}) *MockStateManagerInterface_SaveWorkflowState_Call {
	return &MockStateManagerInterface_SaveWorkflowState_Call{Call: _e.mock.On("SaveWorkflowState", ctx, workflow)}
}

func (_c *MockStateManagerInterface_SaveWorkflowState_Call) Run(run func(ctx context.Context, workflow *domain.WorkflowInstance)) *MockStateManagerInterface_SaveWorkflowState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.WorkflowInstance))
	})
	return _c
}

func (_c *MockStateManagerInterface_SaveWorkflowState_Call) Return(_a0 error) *MockStateManagerInterface_SaveWorkflowState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateManagerInterface_SaveWorkflowState_Call) RunAndReturn(run func(context.Context, *domain.WorkflowInstance) error) *MockStateManagerInterface_SaveWorkflowState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkflowState provides a mock function with given fields: ctx, workflowID, updateFn
func (_m *MockStateManagerInterface) UpdateWorkflowState(ctx context.Context, workflowID string, updateFn func(*domain.WorkflowInstance) error) error {
	ret := _m.Called(ctx, workflowID, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkflowState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(*domain.WorkflowInstance) error) error); ok {
		r0 = rf(ctx, workflowID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateManagerInterface_UpdateWorkflowState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflowState'
type MockStateManagerInterface_UpdateWorkflowState_Call struct {
	*mock.Call
}

// UpdateWorkflowState is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - updateFn func(*domain.WorkflowInstance) error
func (_e *MockStateManagerInterface_Expecter) UpdateWorkflowState(ctx interface{}, workflowID interface{}, updateFn interface{}) *MockStateManagerInterface_UpdateWorkflowState_Call {
	return &MockStateManagerInterface_UpdateWorkflowState_Call{Call: _e.mock.On("UpdateWorkflowState", ctx, workflowID, updateFn)}
}

func (_c *MockStateManagerInterface_UpdateWorkflowState_Call) Run(run func(ctx context.Context, workflowID string, updateFn func(*domain.WorkflowInstance) error)) *MockStateManagerInterface_UpdateWorkflowState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(*domain.WorkflowInstance) error))
	})
	return _c
}

func (_c *MockStateManagerInterface_UpdateWorkflowState_Call) Return(_a0 error) *MockStateManagerInterface_UpdateWorkflowState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateManagerInterface_UpdateWorkflowState_Call) RunAndReturn(run func(context.Context, string, func(*domain.WorkflowInstance) error) error) *MockStateManagerInterface_UpdateWorkflowState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateManagerInterface creates a new instance of MockStateManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateManagerInterface {
	mock := &MockStateManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
