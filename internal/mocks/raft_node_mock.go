// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	badger "github.com/dgraph-io/badger/v3"

	domain "github.com/eleven-am/graft/internal/domain"

	mock "github.com/stretchr/testify/mock"

	ports "github.com/eleven-am/graft/internal/ports"

	time "time"
)

// MockRaftNode is an autogenerated mock type for the RaftNode type
type MockRaftNode struct {
	mock.Mock
}

type MockRaftNode_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRaftNode) EXPECT() *MockRaftNode_Expecter {
	return &MockRaftNode_Expecter{mock: &_m.Mock}
}

// AddNode provides a mock function with given fields: nodeID, address
func (_m *MockRaftNode) AddNode(nodeID string, address string) error {
	ret := _m.Called(nodeID, address)

	if len(ret) == 0 {
		panic("no return value specified for AddNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(nodeID, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRaftNode_AddNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNode'
type MockRaftNode_AddNode_Call struct {
	*mock.Call
}

// AddNode is a helper method to define mock.On call
//   - nodeID string
//   - address string
func (_e *MockRaftNode_Expecter) AddNode(nodeID interface{}, address interface{}) *MockRaftNode_AddNode_Call {
	return &MockRaftNode_AddNode_Call{Call: _e.mock.On("AddNode", nodeID, address)}
}

func (_c *MockRaftNode_AddNode_Call) Run(run func(nodeID string, address string)) *MockRaftNode_AddNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRaftNode_AddNode_Call) Return(_a0 error) *MockRaftNode_AddNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_AddNode_Call) RunAndReturn(run func(string, string) error) *MockRaftNode_AddNode_Call {
	_c.Call.Return(run)
	return _c
}

// AddVoter provides a mock function with given fields: nodeID, address
func (_m *MockRaftNode) AddVoter(nodeID string, address string) error {
	ret := _m.Called(nodeID, address)

	if len(ret) == 0 {
		panic("no return value specified for AddVoter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(nodeID, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRaftNode_AddVoter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVoter'
type MockRaftNode_AddVoter_Call struct {
	*mock.Call
}

// AddVoter is a helper method to define mock.On call
//   - nodeID string
//   - address string
func (_e *MockRaftNode_Expecter) AddVoter(nodeID interface{}, address interface{}) *MockRaftNode_AddVoter_Call {
	return &MockRaftNode_AddVoter_Call{Call: _e.mock.On("AddVoter", nodeID, address)}
}

func (_c *MockRaftNode_AddVoter_Call) Run(run func(nodeID string, address string)) *MockRaftNode_AddVoter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRaftNode_AddVoter_Call) Return(_a0 error) *MockRaftNode_AddVoter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_AddVoter_Call) RunAndReturn(run func(string, string) error) *MockRaftNode_AddVoter_Call {
	_c.Call.Return(run)
	return _c
}

// Apply provides a mock function with given fields: cmd, timeout
func (_m *MockRaftNode) Apply(cmd domain.Command, timeout time.Duration) (*domain.CommandResult, error) {
	ret := _m.Called(cmd, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 *domain.CommandResult
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Command, time.Duration) (*domain.CommandResult, error)); ok {
		return rf(cmd, timeout)
	}
	if rf, ok := ret.Get(0).(func(domain.Command, time.Duration) *domain.CommandResult); ok {
		r0 = rf(cmd, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CommandResult)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.Command, time.Duration) error); ok {
		r1 = rf(cmd, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRaftNode_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockRaftNode_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - cmd domain.Command
//   - timeout time.Duration
func (_e *MockRaftNode_Expecter) Apply(cmd interface{}, timeout interface{}) *MockRaftNode_Apply_Call {
	return &MockRaftNode_Apply_Call{Call: _e.mock.On("Apply", cmd, timeout)}
}

func (_c *MockRaftNode_Apply_Call) Run(run func(cmd domain.Command, timeout time.Duration)) *MockRaftNode_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Command), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockRaftNode_Apply_Call) Return(_a0 *domain.CommandResult, _a1 error) *MockRaftNode_Apply_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRaftNode_Apply_Call) RunAndReturn(run func(domain.Command, time.Duration) (*domain.CommandResult, error)) *MockRaftNode_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterInfo provides a mock function with no fields
func (_m *MockRaftNode) GetClusterInfo() ports.ClusterInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterInfo")
	}

	var r0 ports.ClusterInfo
	if rf, ok := ret.Get(0).(func() ports.ClusterInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ports.ClusterInfo)
	}

	return r0
}

// MockRaftNode_GetClusterInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterInfo'
type MockRaftNode_GetClusterInfo_Call struct {
	*mock.Call
}

// GetClusterInfo is a helper method to define mock.On call
func (_e *MockRaftNode_Expecter) GetClusterInfo() *MockRaftNode_GetClusterInfo_Call {
	return &MockRaftNode_GetClusterInfo_Call{Call: _e.mock.On("GetClusterInfo")}
}

func (_c *MockRaftNode_GetClusterInfo_Call) Run(run func()) *MockRaftNode_GetClusterInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftNode_GetClusterInfo_Call) Return(_a0 ports.ClusterInfo) *MockRaftNode_GetClusterInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_GetClusterInfo_Call) RunAndReturn(run func() ports.ClusterInfo) *MockRaftNode_GetClusterInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealth provides a mock function with no fields
func (_m *MockRaftNode) GetHealth() ports.HealthStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHealth")
	}

	var r0 ports.HealthStatus
	if rf, ok := ret.Get(0).(func() ports.HealthStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ports.HealthStatus)
	}

	return r0
}

// MockRaftNode_GetHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealth'
type MockRaftNode_GetHealth_Call struct {
	*mock.Call
}

// GetHealth is a helper method to define mock.On call
func (_e *MockRaftNode_Expecter) GetHealth() *MockRaftNode_GetHealth_Call {
	return &MockRaftNode_GetHealth_Call{Call: _e.mock.On("GetHealth")}
}

func (_c *MockRaftNode_GetHealth_Call) Run(run func()) *MockRaftNode_GetHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftNode_GetHealth_Call) Return(_a0 ports.HealthStatus) *MockRaftNode_GetHealth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_GetHealth_Call) RunAndReturn(run func() ports.HealthStatus) *MockRaftNode_GetHealth_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalAddress provides a mock function with no fields
func (_m *MockRaftNode) GetLocalAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocalAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRaftNode_GetLocalAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalAddress'
type MockRaftNode_GetLocalAddress_Call struct {
	*mock.Call
}

// GetLocalAddress is a helper method to define mock.On call
func (_e *MockRaftNode_Expecter) GetLocalAddress() *MockRaftNode_GetLocalAddress_Call {
	return &MockRaftNode_GetLocalAddress_Call{Call: _e.mock.On("GetLocalAddress")}
}

func (_c *MockRaftNode_GetLocalAddress_Call) Run(run func()) *MockRaftNode_GetLocalAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftNode_GetLocalAddress_Call) Return(_a0 string) *MockRaftNode_GetLocalAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_GetLocalAddress_Call) RunAndReturn(run func() string) *MockRaftNode_GetLocalAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetrics provides a mock function with no fields
func (_m *MockRaftNode) GetMetrics() ports.RaftMetrics {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 ports.RaftMetrics
	if rf, ok := ret.Get(0).(func() ports.RaftMetrics); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ports.RaftMetrics)
	}

	return r0
}

// MockRaftNode_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockRaftNode_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
func (_e *MockRaftNode_Expecter) GetMetrics() *MockRaftNode_GetMetrics_Call {
	return &MockRaftNode_GetMetrics_Call{Call: _e.mock.On("GetMetrics")}
}

func (_c *MockRaftNode_GetMetrics_Call) Run(run func()) *MockRaftNode_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftNode_GetMetrics_Call) Return(_a0 ports.RaftMetrics) *MockRaftNode_GetMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_GetMetrics_Call) RunAndReturn(run func() ports.RaftMetrics) *MockRaftNode_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// IsLeader provides a mock function with no fields
func (_m *MockRaftNode) IsLeader() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLeader")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRaftNode_IsLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLeader'
type MockRaftNode_IsLeader_Call struct {
	*mock.Call
}

// IsLeader is a helper method to define mock.On call
func (_e *MockRaftNode_Expecter) IsLeader() *MockRaftNode_IsLeader_Call {
	return &MockRaftNode_IsLeader_Call{Call: _e.mock.On("IsLeader")}
}

func (_c *MockRaftNode_IsLeader_Call) Run(run func()) *MockRaftNode_IsLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftNode_IsLeader_Call) Return(_a0 bool) *MockRaftNode_IsLeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_IsLeader_Call) RunAndReturn(run func() bool) *MockRaftNode_IsLeader_Call {
	_c.Call.Return(run)
	return _c
}

// LeaderAddr provides a mock function with no fields
func (_m *MockRaftNode) LeaderAddr() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LeaderAddr")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRaftNode_LeaderAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeaderAddr'
type MockRaftNode_LeaderAddr_Call struct {
	*mock.Call
}

// LeaderAddr is a helper method to define mock.On call
func (_e *MockRaftNode_Expecter) LeaderAddr() *MockRaftNode_LeaderAddr_Call {
	return &MockRaftNode_LeaderAddr_Call{Call: _e.mock.On("LeaderAddr")}
}

func (_c *MockRaftNode_LeaderAddr_Call) Run(run func()) *MockRaftNode_LeaderAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftNode_LeaderAddr_Call) Return(_a0 string) *MockRaftNode_LeaderAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_LeaderAddr_Call) RunAndReturn(run func() string) *MockRaftNode_LeaderAddr_Call {
	_c.Call.Return(run)
	return _c
}

// ReadStale provides a mock function with given fields: key
func (_m *MockRaftNode) ReadStale(key string) ([]byte, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for ReadStale")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRaftNode_ReadStale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadStale'
type MockRaftNode_ReadStale_Call struct {
	*mock.Call
}

// ReadStale is a helper method to define mock.On call
//   - key string
func (_e *MockRaftNode_Expecter) ReadStale(key interface{}) *MockRaftNode_ReadStale_Call {
	return &MockRaftNode_ReadStale_Call{Call: _e.mock.On("ReadStale", key)}
}

func (_c *MockRaftNode_ReadStale_Call) Run(run func(key string)) *MockRaftNode_ReadStale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRaftNode_ReadStale_Call) Return(_a0 []byte, _a1 error) *MockRaftNode_ReadStale_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRaftNode_ReadStale_Call) RunAndReturn(run func(string) ([]byte, error)) *MockRaftNode_ReadStale_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveServer provides a mock function with given fields: nodeID
func (_m *MockRaftNode) RemoveServer(nodeID string) error {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRaftNode_RemoveServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveServer'
type MockRaftNode_RemoveServer_Call struct {
	*mock.Call
}

// RemoveServer is a helper method to define mock.On call
//   - nodeID string
func (_e *MockRaftNode_Expecter) RemoveServer(nodeID interface{}) *MockRaftNode_RemoveServer_Call {
	return &MockRaftNode_RemoveServer_Call{Call: _e.mock.On("RemoveServer", nodeID)}
}

func (_c *MockRaftNode_RemoveServer_Call) Run(run func(nodeID string)) *MockRaftNode_RemoveServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRaftNode_RemoveServer_Call) Return(_a0 error) *MockRaftNode_RemoveServer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_RemoveServer_Call) RunAndReturn(run func(string) error) *MockRaftNode_RemoveServer_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with no fields
func (_m *MockRaftNode) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRaftNode_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockRaftNode_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockRaftNode_Expecter) Shutdown() *MockRaftNode_Shutdown_Call {
	return &MockRaftNode_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockRaftNode_Shutdown_Call) Run(run func()) *MockRaftNode_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftNode_Shutdown_Call) Return(_a0 error) *MockRaftNode_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_Shutdown_Call) RunAndReturn(run func() error) *MockRaftNode_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, existingPeers
func (_m *MockRaftNode) Start(ctx context.Context, existingPeers []ports.Peer) error {
	ret := _m.Called(ctx, existingPeers)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []ports.Peer) error); ok {
		r0 = rf(ctx, existingPeers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRaftNode_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockRaftNode_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - existingPeers []ports.Peer
func (_e *MockRaftNode_Expecter) Start(ctx interface{}, existingPeers interface{}) *MockRaftNode_Start_Call {
	return &MockRaftNode_Start_Call{Call: _e.mock.On("Start", ctx, existingPeers)}
}

func (_c *MockRaftNode_Start_Call) Run(run func(ctx context.Context, existingPeers []ports.Peer)) *MockRaftNode_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ports.Peer))
	})
	return _c
}

func (_c *MockRaftNode_Start_Call) Return(_a0 error) *MockRaftNode_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_Start_Call) RunAndReturn(run func(context.Context, []ports.Peer) error) *MockRaftNode_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StateDB provides a mock function with no fields
func (_m *MockRaftNode) StateDB() *badger.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StateDB")
	}

	var r0 *badger.DB
	if rf, ok := ret.Get(0).(func() *badger.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*badger.DB)
		}
	}

	return r0
}

// MockRaftNode_StateDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateDB'
type MockRaftNode_StateDB_Call struct {
	*mock.Call
}

// StateDB is a helper method to define mock.On call
func (_e *MockRaftNode_Expecter) StateDB() *MockRaftNode_StateDB_Call {
	return &MockRaftNode_StateDB_Call{Call: _e.mock.On("StateDB")}
}

func (_c *MockRaftNode_StateDB_Call) Run(run func()) *MockRaftNode_StateDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftNode_StateDB_Call) Return(_a0 *badger.DB) *MockRaftNode_StateDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_StateDB_Call) RunAndReturn(run func() *badger.DB) *MockRaftNode_StateDB_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockRaftNode) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRaftNode_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockRaftNode_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockRaftNode_Expecter) Stop() *MockRaftNode_Stop_Call {
	return &MockRaftNode_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockRaftNode_Stop_Call) Run(run func()) *MockRaftNode_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftNode_Stop_Call) Return(_a0 error) *MockRaftNode_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_Stop_Call) RunAndReturn(run func() error) *MockRaftNode_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// TransferLeadership provides a mock function with no fields
func (_m *MockRaftNode) TransferLeadership() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransferLeadership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRaftNode_TransferLeadership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferLeadership'
type MockRaftNode_TransferLeadership_Call struct {
	*mock.Call
}

// TransferLeadership is a helper method to define mock.On call
func (_e *MockRaftNode_Expecter) TransferLeadership() *MockRaftNode_TransferLeadership_Call {
	return &MockRaftNode_TransferLeadership_Call{Call: _e.mock.On("TransferLeadership")}
}

func (_c *MockRaftNode_TransferLeadership_Call) Run(run func()) *MockRaftNode_TransferLeadership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftNode_TransferLeadership_Call) Return(_a0 error) *MockRaftNode_TransferLeadership_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_TransferLeadership_Call) RunAndReturn(run func() error) *MockRaftNode_TransferLeadership_Call {
	_c.Call.Return(run)
	return _c
}

// TransferLeadershipTo provides a mock function with given fields: serverID
func (_m *MockRaftNode) TransferLeadershipTo(serverID string) error {
	ret := _m.Called(serverID)

	if len(ret) == 0 {
		panic("no return value specified for TransferLeadershipTo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serverID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRaftNode_TransferLeadershipTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferLeadershipTo'
type MockRaftNode_TransferLeadershipTo_Call struct {
	*mock.Call
}

// TransferLeadershipTo is a helper method to define mock.On call
//   - serverID string
func (_e *MockRaftNode_Expecter) TransferLeadershipTo(serverID interface{}) *MockRaftNode_TransferLeadershipTo_Call {
	return &MockRaftNode_TransferLeadershipTo_Call{Call: _e.mock.On("TransferLeadershipTo", serverID)}
}

func (_c *MockRaftNode_TransferLeadershipTo_Call) Run(run func(serverID string)) *MockRaftNode_TransferLeadershipTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRaftNode_TransferLeadershipTo_Call) Return(_a0 error) *MockRaftNode_TransferLeadershipTo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_TransferLeadershipTo_Call) RunAndReturn(run func(string) error) *MockRaftNode_TransferLeadershipTo_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForLeader provides a mock function with given fields: ctx
func (_m *MockRaftNode) WaitForLeader(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitForLeader")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRaftNode_WaitForLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForLeader'
type MockRaftNode_WaitForLeader_Call struct {
	*mock.Call
}

// WaitForLeader is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRaftNode_Expecter) WaitForLeader(ctx interface{}) *MockRaftNode_WaitForLeader_Call {
	return &MockRaftNode_WaitForLeader_Call{Call: _e.mock.On("WaitForLeader", ctx)}
}

func (_c *MockRaftNode_WaitForLeader_Call) Run(run func(ctx context.Context)) *MockRaftNode_WaitForLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRaftNode_WaitForLeader_Call) Return(_a0 error) *MockRaftNode_WaitForLeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaftNode_WaitForLeader_Call) RunAndReturn(run func(context.Context) error) *MockRaftNode_WaitForLeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRaftNode creates a new instance of MockRaftNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRaftNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRaftNode {
	mock := &MockRaftNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
