// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	engine "github.com/eleven-am/graft/internal/adapters/engine"
	mock "github.com/stretchr/testify/mock"
)

// MockEvaluationTrigger is an autogenerated mock type for the EvaluationTrigger type
type MockEvaluationTrigger struct {
	mock.Mock
}

type MockEvaluationTrigger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvaluationTrigger) EXPECT() *MockEvaluationTrigger_Expecter {
	return &MockEvaluationTrigger_Expecter{mock: &_m.Mock}
}

// RegisterEvaluator provides a mock function with given fields: evaluator
func (_m *MockEvaluationTrigger) RegisterEvaluator(evaluator engine.PendingEvaluator) {
	_m.Called(evaluator)
}

// MockEvaluationTrigger_RegisterEvaluator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEvaluator'
type MockEvaluationTrigger_RegisterEvaluator_Call struct {
	*mock.Call
}

// RegisterEvaluator is a helper method to define mock.On call
//   - evaluator engine.PendingEvaluator
func (_e *MockEvaluationTrigger_Expecter) RegisterEvaluator(evaluator interface{}) *MockEvaluationTrigger_RegisterEvaluator_Call {
	return &MockEvaluationTrigger_RegisterEvaluator_Call{Call: _e.mock.On("RegisterEvaluator", evaluator)}
}

func (_c *MockEvaluationTrigger_RegisterEvaluator_Call) Run(run func(evaluator engine.PendingEvaluator)) *MockEvaluationTrigger_RegisterEvaluator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(engine.PendingEvaluator))
	})
	return _c
}

func (_c *MockEvaluationTrigger_RegisterEvaluator_Call) Return() *MockEvaluationTrigger_RegisterEvaluator_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEvaluationTrigger_RegisterEvaluator_Call) RunAndReturn(run func(engine.PendingEvaluator)) *MockEvaluationTrigger_RegisterEvaluator_Call {
	_c.Run(run)
	return _c
}

// RegisterStateSubscriber provides a mock function with given fields: subscriber
func (_m *MockEvaluationTrigger) RegisterStateSubscriber(subscriber *engine.StateSubscriptionManager) {
	_m.Called(subscriber)
}

// MockEvaluationTrigger_RegisterStateSubscriber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterStateSubscriber'
type MockEvaluationTrigger_RegisterStateSubscriber_Call struct {
	*mock.Call
}

// RegisterStateSubscriber is a helper method to define mock.On call
//   - subscriber *engine.StateSubscriptionManager
func (_e *MockEvaluationTrigger_Expecter) RegisterStateSubscriber(subscriber interface{}) *MockEvaluationTrigger_RegisterStateSubscriber_Call {
	return &MockEvaluationTrigger_RegisterStateSubscriber_Call{Call: _e.mock.On("RegisterStateSubscriber", subscriber)}
}

func (_c *MockEvaluationTrigger_RegisterStateSubscriber_Call) Run(run func(subscriber *engine.StateSubscriptionManager)) *MockEvaluationTrigger_RegisterStateSubscriber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*engine.StateSubscriptionManager))
	})
	return _c
}

func (_c *MockEvaluationTrigger_RegisterStateSubscriber_Call) Return() *MockEvaluationTrigger_RegisterStateSubscriber_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEvaluationTrigger_RegisterStateSubscriber_Call) RunAndReturn(run func(*engine.StateSubscriptionManager)) *MockEvaluationTrigger_RegisterStateSubscriber_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockEvaluationTrigger) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEvaluationTrigger_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEvaluationTrigger_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEvaluationTrigger_Expecter) Start(ctx interface{}) *MockEvaluationTrigger_Start_Call {
	return &MockEvaluationTrigger_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockEvaluationTrigger_Start_Call) Run(run func(ctx context.Context)) *MockEvaluationTrigger_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEvaluationTrigger_Start_Call) Return(_a0 error) *MockEvaluationTrigger_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvaluationTrigger_Start_Call) RunAndReturn(run func(context.Context) error) *MockEvaluationTrigger_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockEvaluationTrigger) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEvaluationTrigger_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockEvaluationTrigger_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockEvaluationTrigger_Expecter) Stop() *MockEvaluationTrigger_Stop_Call {
	return &MockEvaluationTrigger_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockEvaluationTrigger_Stop_Call) Run(run func()) *MockEvaluationTrigger_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvaluationTrigger_Stop_Call) Return(_a0 error) *MockEvaluationTrigger_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvaluationTrigger_Stop_Call) RunAndReturn(run func() error) *MockEvaluationTrigger_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerEvaluation provides a mock function with given fields: ctx, event
func (_m *MockEvaluationTrigger) TriggerEvaluation(ctx context.Context, event engine.StateChangeEvent) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for TriggerEvaluation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, engine.StateChangeEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEvaluationTrigger_TriggerEvaluation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerEvaluation'
type MockEvaluationTrigger_TriggerEvaluation_Call struct {
	*mock.Call
}

// TriggerEvaluation is a helper method to define mock.On call
//   - ctx context.Context
//   - event engine.StateChangeEvent
func (_e *MockEvaluationTrigger_Expecter) TriggerEvaluation(ctx interface{}, event interface{}) *MockEvaluationTrigger_TriggerEvaluation_Call {
	return &MockEvaluationTrigger_TriggerEvaluation_Call{Call: _e.mock.On("TriggerEvaluation", ctx, event)}
}

func (_c *MockEvaluationTrigger_TriggerEvaluation_Call) Run(run func(ctx context.Context, event engine.StateChangeEvent)) *MockEvaluationTrigger_TriggerEvaluation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(engine.StateChangeEvent))
	})
	return _c
}

func (_c *MockEvaluationTrigger_TriggerEvaluation_Call) Return(_a0 error) *MockEvaluationTrigger_TriggerEvaluation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvaluationTrigger_TriggerEvaluation_Call) RunAndReturn(run func(context.Context, engine.StateChangeEvent) error) *MockEvaluationTrigger_TriggerEvaluation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEvaluationTrigger creates a new instance of MockEvaluationTrigger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvaluationTrigger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvaluationTrigger {
	mock := &MockEvaluationTrigger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
