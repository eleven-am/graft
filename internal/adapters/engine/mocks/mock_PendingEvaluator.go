// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eleven-am/graft/internal/domain"

	mock "github.com/stretchr/testify/mock"

	ports "github.com/eleven-am/graft/internal/ports"
)

// MockPendingEvaluator is an autogenerated mock type for the PendingEvaluator type
type MockPendingEvaluator struct {
	mock.Mock
}

type MockPendingEvaluator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPendingEvaluator) EXPECT() *MockPendingEvaluator_Expecter {
	return &MockPendingEvaluator_Expecter{mock: &_m.Mock}
}

// CheckNodeReadiness provides a mock function with given fields: node, state, config
func (_m *MockPendingEvaluator) CheckNodeReadiness(node *domain.PendingNodeData, state interface{}, config interface{}) bool {
	ret := _m.Called(node, state, config)

	if len(ret) == 0 {
		panic("no return value specified for CheckNodeReadiness")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*domain.PendingNodeData, interface{}, interface{}) bool); ok {
		r0 = rf(node, state, config)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPendingEvaluator_CheckNodeReadiness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckNodeReadiness'
type MockPendingEvaluator_CheckNodeReadiness_Call struct {
	*mock.Call
}

// CheckNodeReadiness is a helper method to define mock.On call
//   - node *domain.PendingNodeData
//   - state interface{}
//   - config interface{}
func (_e *MockPendingEvaluator_Expecter) CheckNodeReadiness(node interface{}, state interface{}, config interface{}) *MockPendingEvaluator_CheckNodeReadiness_Call {
	return &MockPendingEvaluator_CheckNodeReadiness_Call{Call: _e.mock.On("CheckNodeReadiness", node, state, config)}
}

func (_c *MockPendingEvaluator_CheckNodeReadiness_Call) Run(run func(node *domain.PendingNodeData, state interface{}, config interface{})) *MockPendingEvaluator_CheckNodeReadiness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.PendingNodeData), args[1].(interface{}), args[2].(interface{}))
	})
	return _c
}

func (_c *MockPendingEvaluator_CheckNodeReadiness_Call) Return(_a0 bool) *MockPendingEvaluator_CheckNodeReadiness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPendingEvaluator_CheckNodeReadiness_Call) RunAndReturn(run func(*domain.PendingNodeData, interface{}, interface{}) bool) *MockPendingEvaluator_CheckNodeReadiness_Call {
	_c.Call.Return(run)
	return _c
}

// EvaluatePendingNodes provides a mock function with given fields: ctx, workflowID, currentState
func (_m *MockPendingEvaluator) EvaluatePendingNodes(ctx context.Context, workflowID string, currentState interface{}) error {
	ret := _m.Called(ctx, workflowID, currentState)

	if len(ret) == 0 {
		panic("no return value specified for EvaluatePendingNodes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, workflowID, currentState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPendingEvaluator_EvaluatePendingNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluatePendingNodes'
type MockPendingEvaluator_EvaluatePendingNodes_Call struct {
	*mock.Call
}

// EvaluatePendingNodes is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - currentState interface{}
func (_e *MockPendingEvaluator_Expecter) EvaluatePendingNodes(ctx interface{}, workflowID interface{}, currentState interface{}) *MockPendingEvaluator_EvaluatePendingNodes_Call {
	return &MockPendingEvaluator_EvaluatePendingNodes_Call{Call: _e.mock.On("EvaluatePendingNodes", ctx, workflowID, currentState)}
}

func (_c *MockPendingEvaluator_EvaluatePendingNodes_Call) Run(run func(ctx context.Context, workflowID string, currentState interface{})) *MockPendingEvaluator_EvaluatePendingNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockPendingEvaluator_EvaluatePendingNodes_Call) Return(_a0 error) *MockPendingEvaluator_EvaluatePendingNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPendingEvaluator_EvaluatePendingNodes_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *MockPendingEvaluator_EvaluatePendingNodes_Call {
	_c.Call.Return(run)
	return _c
}

// MovePendingToReady provides a mock function with given fields: ctx, items
func (_m *MockPendingEvaluator) MovePendingToReady(ctx context.Context, items []ports.QueueItem) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for MovePendingToReady")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []ports.QueueItem) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPendingEvaluator_MovePendingToReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MovePendingToReady'
type MockPendingEvaluator_MovePendingToReady_Call struct {
	*mock.Call
}

// MovePendingToReady is a helper method to define mock.On call
//   - ctx context.Context
//   - items []ports.QueueItem
func (_e *MockPendingEvaluator_Expecter) MovePendingToReady(ctx interface{}, items interface{}) *MockPendingEvaluator_MovePendingToReady_Call {
	return &MockPendingEvaluator_MovePendingToReady_Call{Call: _e.mock.On("MovePendingToReady", ctx, items)}
}

func (_c *MockPendingEvaluator_MovePendingToReady_Call) Run(run func(ctx context.Context, items []ports.QueueItem)) *MockPendingEvaluator_MovePendingToReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ports.QueueItem))
	})
	return _c
}

func (_c *MockPendingEvaluator_MovePendingToReady_Call) Return(_a0 error) *MockPendingEvaluator_MovePendingToReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPendingEvaluator_MovePendingToReady_Call) RunAndReturn(run func(context.Context, []ports.QueueItem) error) *MockPendingEvaluator_MovePendingToReady_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPendingEvaluator creates a new instance of MockPendingEvaluator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPendingEvaluator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPendingEvaluator {
	mock := &MockPendingEvaluator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
